/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * View-модель для счётчика.
 */
@ApiModel(description = "View-модель для счётчика.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class BusinessActivityViewModel {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("activityDate")
  private OffsetDateTime activityDate = null;

  @JsonProperty("creationDate")
  private OffsetDateTime creationDate = null;

  /**
   * Тип контекста.
   */
  public enum ContextTypeEnum {
    UNKNOWN("Unknown"),
    
    DEVICEREQUEST("DeviceRequest"),
    
    SHOWCASEPURCHASE("ShowcasePurchase"),
    
    USERDATETIMEEVENT("UserDateTimeEvent"),
    
    BONUSLIFETIMEEVENT("BonusLifeTimeEvent"),
    
    CHANGENOTIFIER("ChangeNotifier"),
    
    REGISTRATIONEND("RegistrationEnd"),
    
    LINKCARD("LinkCard"),
    
    CHANGECARDSTATE("ChangeCardState"),
    
    SMSREGISTRATION("SmsRegistration"),
    
    QUESTIONNAIREUPDATE("QuestionnaireUpdate"),
    
    EXTERNALCARDREPLACE("ExternalCardReplace"),
    
    PUSHDEVICEREGISTRATION("PushDeviceRegistration"),
    
    SENDPASSWORDTOCHEQUE("SendPasswordToCheque"),
    
    PURCHASEOPERATION("PurchaseOperation"),
    
    SOCIALNETWORKACTION("SocialNetworkAction"),
    
    MANUALPAYOPERATION("ManualPayOperation"),
    
    REFERRALACTIVITY("ReferralActivity"),
    
    USERDEREGISTRATION("UserDeregistration");

    private String value;

    ContextTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContextTypeEnum fromValue(String text) {
      for (ContextTypeEnum b : ContextTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("contextType")
  private ContextTypeEnum contextType = null;

  @JsonProperty("personId")
  private Integer personId = null;

  @JsonProperty("calculationIds")
  private List<Long> calculationIds = null;

  @JsonProperty("purchaseId")
  private Integer purchaseId = null;

  /**
   * Тип операции покупки.
   */
  public enum PurchaseOperationTypeEnum {
    UNKNOWN("Unknown"),
    
    PAYMENT("Payment"),
    
    DEPOSIT("Deposit"),
    
    CASHBACK("Cashback"),
    
    REFUND("Refund"),
    
    DIRECTDISCOUNT("DirectDiscount"),
    
    CONFIRMPURCHASE("ConfirmPurchase"),
    
    GIFTCARDPAYMENT("GiftCardPayment"),
    
    CANCELPURCHASE("CancelPurchase");

    private String value;

    PurchaseOperationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PurchaseOperationTypeEnum fromValue(String text) {
      for (PurchaseOperationTypeEnum b : PurchaseOperationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("purchaseOperationType")
  private PurchaseOperationTypeEnum purchaseOperationType = null;

  public BusinessActivityViewModel id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор счётчика.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор счётчика.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public BusinessActivityViewModel activityDate(OffsetDateTime activityDate) {
    this.activityDate = activityDate;
    return this;
  }

   /**
   * Дата активности (локальное время + временная зона запроса или пользователя).
   * @return activityDate
  **/
  @ApiModelProperty(value = "Дата активности (локальное время + временная зона запроса или пользователя).")
  public OffsetDateTime getActivityDate() {
    return activityDate;
  }

  public void setActivityDate(OffsetDateTime activityDate) {
    this.activityDate = activityDate;
  }

  public BusinessActivityViewModel creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Время создания записи в UTC.
   * @return creationDate
  **/
  @ApiModelProperty(value = "Время создания записи в UTC.")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public BusinessActivityViewModel contextType(ContextTypeEnum contextType) {
    this.contextType = contextType;
    return this;
  }

   /**
   * Тип контекста.
   * @return contextType
  **/
  @ApiModelProperty(value = "Тип контекста.")
  public ContextTypeEnum getContextType() {
    return contextType;
  }

  public void setContextType(ContextTypeEnum contextType) {
    this.contextType = contextType;
  }

  public BusinessActivityViewModel personId(Integer personId) {
    this.personId = personId;
    return this;
  }

   /**
   * Идентификатор пользователя.
   * @return personId
  **/
  @ApiModelProperty(value = "Идентификатор пользователя.")
  public Integer getPersonId() {
    return personId;
  }

  public void setPersonId(Integer personId) {
    this.personId = personId;
  }

  public BusinessActivityViewModel calculationIds(List<Long> calculationIds) {
    this.calculationIds = calculationIds;
    return this;
  }

  public BusinessActivityViewModel addCalculationIdsItem(Long calculationIdsItem) {
    if (this.calculationIds == null) {
      this.calculationIds = new ArrayList<>();
    }
    this.calculationIds.add(calculationIdsItem);
    return this;
  }

   /**
   * Идентификаторы связанных расчётов.
   * @return calculationIds
  **/
  @ApiModelProperty(value = "Идентификаторы связанных расчётов.")
  public List<Long> getCalculationIds() {
    return calculationIds;
  }

  public void setCalculationIds(List<Long> calculationIds) {
    this.calculationIds = calculationIds;
  }

  public BusinessActivityViewModel purchaseId(Integer purchaseId) {
    this.purchaseId = purchaseId;
    return this;
  }

   /**
   * Идентификатор покупки.
   * @return purchaseId
  **/
  @ApiModelProperty(value = "Идентификатор покупки.")
  public Integer getPurchaseId() {
    return purchaseId;
  }

  public void setPurchaseId(Integer purchaseId) {
    this.purchaseId = purchaseId;
  }

  public BusinessActivityViewModel purchaseOperationType(PurchaseOperationTypeEnum purchaseOperationType) {
    this.purchaseOperationType = purchaseOperationType;
    return this;
  }

   /**
   * Тип операции покупки.
   * @return purchaseOperationType
  **/
  @ApiModelProperty(value = "Тип операции покупки.")
  public PurchaseOperationTypeEnum getPurchaseOperationType() {
    return purchaseOperationType;
  }

  public void setPurchaseOperationType(PurchaseOperationTypeEnum purchaseOperationType) {
    this.purchaseOperationType = purchaseOperationType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessActivityViewModel businessActivityViewModel = (BusinessActivityViewModel) o;
    return Objects.equals(this.id, businessActivityViewModel.id) &&
        Objects.equals(this.activityDate, businessActivityViewModel.activityDate) &&
        Objects.equals(this.creationDate, businessActivityViewModel.creationDate) &&
        Objects.equals(this.contextType, businessActivityViewModel.contextType) &&
        Objects.equals(this.personId, businessActivityViewModel.personId) &&
        Objects.equals(this.calculationIds, businessActivityViewModel.calculationIds) &&
        Objects.equals(this.purchaseId, businessActivityViewModel.purchaseId) &&
        Objects.equals(this.purchaseOperationType, businessActivityViewModel.purchaseOperationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, activityDate, creationDate, contextType, personId, calculationIds, purchaseId, purchaseOperationType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessActivityViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    activityDate: ").append(toIndentedString(activityDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    calculationIds: ").append(toIndentedString(calculationIds)).append("\n");
    sb.append("    purchaseId: ").append(toIndentedString(purchaseId)).append("\n");
    sb.append("    purchaseOperationType: ").append(toIndentedString(purchaseOperationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

