/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;

/**
 * Модель фильтра для получения расчёта событий.
 */
@ApiModel(description = "Модель фильтра для получения расчёта событий.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class BusinessEventListFilter {
  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("count")
  private Integer count = null;

  @JsonProperty("activityDateFrom")
  private OffsetDateTime activityDateFrom = null;

  @JsonProperty("activityDateTo")
  private OffsetDateTime activityDateTo = null;

  @JsonProperty("personId")
  private Integer personId = null;

  @JsonProperty("purchaseId")
  private Integer purchaseId = null;

  /**
   * Тип контекста.
   */
  public enum ContextTypeEnum {
    UNKNOWN("Unknown"),
    
    DEVICEREQUEST("DeviceRequest"),
    
    SHOWCASEPURCHASE("ShowcasePurchase"),
    
    USERDATETIMEEVENT("UserDateTimeEvent"),
    
    BONUSLIFETIMEEVENT("BonusLifeTimeEvent"),
    
    CHANGENOTIFIER("ChangeNotifier"),
    
    REGISTRATIONEND("RegistrationEnd"),
    
    LINKCARD("LinkCard"),
    
    CHANGECARDSTATE("ChangeCardState"),
    
    SMSREGISTRATION("SmsRegistration"),
    
    QUESTIONNAIREUPDATE("QuestionnaireUpdate"),
    
    EXTERNALCARDREPLACE("ExternalCardReplace"),
    
    PUSHDEVICEREGISTRATION("PushDeviceRegistration"),
    
    SENDPASSWORDTOCHEQUE("SendPasswordToCheque"),
    
    PURCHASEOPERATION("PurchaseOperation"),
    
    SOCIALNETWORKACTION("SocialNetworkAction"),
    
    MANUALPAYOPERATION("ManualPayOperation"),
    
    REFERRALACTIVITY("ReferralActivity"),
    
    USERDEREGISTRATION("UserDeregistration");

    private String value;

    ContextTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContextTypeEnum fromValue(String text) {
      for (ContextTypeEnum b : ContextTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("contextType")
  private ContextTypeEnum contextType = null;

  public BusinessEventListFilter from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * С какого элемента брать.
   * @return from
  **/
  @ApiModelProperty(value = "С какого элемента брать.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public BusinessEventListFilter count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Сколько элементов брать.
   * @return count
  **/
  @ApiModelProperty(value = "Сколько элементов брать.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public BusinessEventListFilter activityDateFrom(OffsetDateTime activityDateFrom) {
    this.activityDateFrom = activityDateFrom;
    return this;
  }

   /**
   * Дата создания с.
   * @return activityDateFrom
  **/
  @ApiModelProperty(value = "Дата создания с.")
  public OffsetDateTime getActivityDateFrom() {
    return activityDateFrom;
  }

  public void setActivityDateFrom(OffsetDateTime activityDateFrom) {
    this.activityDateFrom = activityDateFrom;
  }

  public BusinessEventListFilter activityDateTo(OffsetDateTime activityDateTo) {
    this.activityDateTo = activityDateTo;
    return this;
  }

   /**
   * Дата создания по.
   * @return activityDateTo
  **/
  @ApiModelProperty(value = "Дата создания по.")
  public OffsetDateTime getActivityDateTo() {
    return activityDateTo;
  }

  public void setActivityDateTo(OffsetDateTime activityDateTo) {
    this.activityDateTo = activityDateTo;
  }

  public BusinessEventListFilter personId(Integer personId) {
    this.personId = personId;
    return this;
  }

   /**
   * Идентификатор пользователя.
   * @return personId
  **/
  @ApiModelProperty(value = "Идентификатор пользователя.")
  public Integer getPersonId() {
    return personId;
  }

  public void setPersonId(Integer personId) {
    this.personId = personId;
  }

  public BusinessEventListFilter purchaseId(Integer purchaseId) {
    this.purchaseId = purchaseId;
    return this;
  }

   /**
   * Идентификатор покупки.
   * @return purchaseId
  **/
  @ApiModelProperty(value = "Идентификатор покупки.")
  public Integer getPurchaseId() {
    return purchaseId;
  }

  public void setPurchaseId(Integer purchaseId) {
    this.purchaseId = purchaseId;
  }

  public BusinessEventListFilter contextType(ContextTypeEnum contextType) {
    this.contextType = contextType;
    return this;
  }

   /**
   * Тип контекста.
   * @return contextType
  **/
  @ApiModelProperty(value = "Тип контекста.")
  public ContextTypeEnum getContextType() {
    return contextType;
  }

  public void setContextType(ContextTypeEnum contextType) {
    this.contextType = contextType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessEventListFilter businessEventListFilter = (BusinessEventListFilter) o;
    return Objects.equals(this.from, businessEventListFilter.from) &&
        Objects.equals(this.count, businessEventListFilter.count) &&
        Objects.equals(this.activityDateFrom, businessEventListFilter.activityDateFrom) &&
        Objects.equals(this.activityDateTo, businessEventListFilter.activityDateTo) &&
        Objects.equals(this.personId, businessEventListFilter.personId) &&
        Objects.equals(this.purchaseId, businessEventListFilter.purchaseId) &&
        Objects.equals(this.contextType, businessEventListFilter.contextType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, count, activityDateFrom, activityDateTo, personId, purchaseId, contextType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessEventListFilter {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    activityDateFrom: ").append(toIndentedString(activityDateFrom)).append("\n");
    sb.append("    activityDateTo: ").append(toIndentedString(activityDateTo)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    purchaseId: ").append(toIndentedString(purchaseId)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

