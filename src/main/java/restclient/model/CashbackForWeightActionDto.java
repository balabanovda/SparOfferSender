/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Действие акции \&quot;Бонусы\&quot;.
 */
@ApiModel(description = "Действие акции \"Бонусы\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CashbackForWeightActionDto {
  @JsonProperty("percent")
  private Double percent = null;

  @JsonProperty("amountPerUnit")
  private Double amountPerUnit = null;

  @JsonProperty("amountPerUniqueSku")
  private Double amountPerUniqueSku = null;

  @JsonProperty("pricePerUnit")
  private Double pricePerUnit = null;

  @JsonProperty("amount")
  private Double amount = null;

  @JsonProperty("amountMeasure")
  private Double amountMeasure = null;

  @JsonProperty("amountPerMeasure")
  private Double amountPerMeasure = null;

  @JsonProperty("amountWeight")
  private Double amountWeight = null;

  @JsonProperty("amountPerWeight")
  private Double amountPerWeight = null;

  @JsonProperty("price")
  private Double price = null;

  @JsonProperty("attributeDiscount")
  private AttributeDiscountDto attributeDiscount = null;

  @JsonProperty("distributeToAll")
  private Boolean distributeToAll = null;

  /**
   * Тип скидки (readonly, рассчитывается на основе других полей).
   */
  public enum DiscountTypeEnum {
    PERCENT("Percent"),
    
    AMOUNT("Amount"),
    
    PRICEPERUNIT("PricePerUnit"),
    
    AMOUNTPERUNIT("AmountPerUnit"),
    
    AMOUNTPERMEASURE("AmountPerMeasure"),
    
    PRICE("Price"),
    
    AMOUNTPERUNIQUESKU("AmountPerUniqueSku"),
    
    AMOUNTPERWEIGHT("AmountPerWeight");

    private String value;

    DiscountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DiscountTypeEnum fromValue(String text) {
      for (DiscountTypeEnum b : DiscountTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("discountType")
  private DiscountTypeEnum discountType = null;

  /**
   * Gets or Sets calculationExclusionDiscountTypes
   */
  public enum CalculationExclusionDiscountTypesEnum {
    DISCOUNT("Discount"),
    
    PAYMENTLOYMAXBONUS("PaymentLoymaxBonus"),
    
    PAYMENTEXTERNALBONUS("PaymentExternalBonus");

    private String value;

    CalculationExclusionDiscountTypesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CalculationExclusionDiscountTypesEnum fromValue(String text) {
      for (CalculationExclusionDiscountTypesEnum b : CalculationExclusionDiscountTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("calculationExclusionDiscountTypes")
  private List<CalculationExclusionDiscountTypesEnum> calculationExclusionDiscountTypes = null;

  @JsonProperty("order")
  private Integer order = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("lifeTimeDefinitionId")
  private Integer lifeTimeDefinitionId = null;

  @JsonProperty("currencyExternalId")
  private String currencyExternalId = null;

  public CashbackForWeightActionDto percent(Double percent) {
    this.percent = percent;
    return this;
  }

   /**
   * Процент. Значение от 0 до 1.
   * @return percent
  **/
  @ApiModelProperty(value = "Процент. Значение от 0 до 1.")
  public Double getPercent() {
    return percent;
  }

  public void setPercent(Double percent) {
    this.percent = percent;
  }

  public CashbackForWeightActionDto amountPerUnit(Double amountPerUnit) {
    this.amountPerUnit = amountPerUnit;
    return this;
  }

   /**
   * Сумма скидки на единицу товара.
   * @return amountPerUnit
  **/
  @ApiModelProperty(value = "Сумма скидки на единицу товара.")
  public Double getAmountPerUnit() {
    return amountPerUnit;
  }

  public void setAmountPerUnit(Double amountPerUnit) {
    this.amountPerUnit = amountPerUnit;
  }

  public CashbackForWeightActionDto amountPerUniqueSku(Double amountPerUniqueSku) {
    this.amountPerUniqueSku = amountPerUniqueSku;
    return this;
  }

   /**
   * Сумма скидки на sku.
   * @return amountPerUniqueSku
  **/
  @ApiModelProperty(value = "Сумма скидки на sku.")
  public Double getAmountPerUniqueSku() {
    return amountPerUniqueSku;
  }

  public void setAmountPerUniqueSku(Double amountPerUniqueSku) {
    this.amountPerUniqueSku = amountPerUniqueSku;
  }

  public CashbackForWeightActionDto pricePerUnit(Double pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
    return this;
  }

   /**
   * Цена за единицу товара.
   * @return pricePerUnit
  **/
  @ApiModelProperty(value = "Цена за единицу товара.")
  public Double getPricePerUnit() {
    return pricePerUnit;
  }

  public void setPricePerUnit(Double pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }

  public CashbackForWeightActionDto amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Фиксированная сумма скидки.
   * @return amount
  **/
  @ApiModelProperty(value = "Фиксированная сумма скидки.")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public CashbackForWeightActionDto amountMeasure(Double amountMeasure) {
    this.amountMeasure = amountMeasure;
    return this;
  }

   /**
   * Сумма, за каждое достижение в чеке которой начисляется фиксированная скидка/бонус{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountPerMeasure}.
   * @return amountMeasure
  **/
  @ApiModelProperty(value = "Сумма, за каждое достижение в чеке которой начисляется фиксированная скидка/бонус{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountPerMeasure}.")
  public Double getAmountMeasure() {
    return amountMeasure;
  }

  public void setAmountMeasure(Double amountMeasure) {
    this.amountMeasure = amountMeasure;
  }

  public CashbackForWeightActionDto amountPerMeasure(Double amountPerMeasure) {
    this.amountPerMeasure = amountPerMeasure;
    return this;
  }

   /**
   * Сумма фиксированной скидки/бонуса, которая начисляется за каждое достижение в чеке суммы{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountMeasure}.
   * @return amountPerMeasure
  **/
  @ApiModelProperty(value = "Сумма фиксированной скидки/бонуса, которая начисляется за каждое достижение в чеке суммы{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountMeasure}.")
  public Double getAmountPerMeasure() {
    return amountPerMeasure;
  }

  public void setAmountPerMeasure(Double amountPerMeasure) {
    this.amountPerMeasure = amountPerMeasure;
  }

  public CashbackForWeightActionDto amountWeight(Double amountWeight) {
    this.amountWeight = amountWeight;
    return this;
  }

   /**
   * Масса, за каждое достижение в чеке которой начисляется фиксированная скидка/бонус{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountPerWeight}.
   * @return amountWeight
  **/
  @ApiModelProperty(value = "Масса, за каждое достижение в чеке которой начисляется фиксированная скидка/бонус{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountPerWeight}.")
  public Double getAmountWeight() {
    return amountWeight;
  }

  public void setAmountWeight(Double amountWeight) {
    this.amountWeight = amountWeight;
  }

  public CashbackForWeightActionDto amountPerWeight(Double amountPerWeight) {
    this.amountPerWeight = amountPerWeight;
    return this;
  }

   /**
   * Сумма фиксированной скидки/бонуса, которая начисляется за каждое достижение в чеке массы{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountWeight}.
   * @return amountPerWeight
  **/
  @ApiModelProperty(value = "Сумма фиксированной скидки/бонуса, которая начисляется за каждое достижение в чеке массы{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountWeight}.")
  public Double getAmountPerWeight() {
    return amountPerWeight;
  }

  public void setAmountPerWeight(Double amountPerWeight) {
    this.amountPerWeight = amountPerWeight;
  }

  public CashbackForWeightActionDto price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Фиксированная цена всех товаров.
   * @return price
  **/
  @ApiModelProperty(value = "Фиксированная цена всех товаров.")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public CashbackForWeightActionDto attributeDiscount(AttributeDiscountDto attributeDiscount) {
    this.attributeDiscount = attributeDiscount;
    return this;
  }

   /**
   * Атрибут для расчета.
   * @return attributeDiscount
  **/
  @ApiModelProperty(value = "Атрибут для расчета.")
  public AttributeDiscountDto getAttributeDiscount() {
    return attributeDiscount;
  }

  public void setAttributeDiscount(AttributeDiscountDto attributeDiscount) {
    this.attributeDiscount = attributeDiscount;
  }

  public CashbackForWeightActionDto distributeToAll(Boolean distributeToAll) {
    this.distributeToAll = distributeToAll;
    return this;
  }

   /**
   * Распределить на все.
   * @return distributeToAll
  **/
  @ApiModelProperty(value = "Распределить на все.")
  public Boolean isDistributeToAll() {
    return distributeToAll;
  }

  public void setDistributeToAll(Boolean distributeToAll) {
    this.distributeToAll = distributeToAll;
  }

  public CashbackForWeightActionDto discountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
    return this;
  }

   /**
   * Тип скидки (readonly, рассчитывается на основе других полей).
   * @return discountType
  **/
  @ApiModelProperty(value = "Тип скидки (readonly, рассчитывается на основе других полей).")
  public DiscountTypeEnum getDiscountType() {
    return discountType;
  }

  public void setDiscountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
  }

  public CashbackForWeightActionDto calculationExclusionDiscountTypes(List<CalculationExclusionDiscountTypesEnum> calculationExclusionDiscountTypes) {
    this.calculationExclusionDiscountTypes = calculationExclusionDiscountTypes;
    return this;
  }

  public CashbackForWeightActionDto addCalculationExclusionDiscountTypesItem(CalculationExclusionDiscountTypesEnum calculationExclusionDiscountTypesItem) {
    if (this.calculationExclusionDiscountTypes == null) {
      this.calculationExclusionDiscountTypes = new ArrayList<>();
    }
    this.calculationExclusionDiscountTypes.add(calculationExclusionDiscountTypesItem);
    return this;
  }

   /**
   * Типы скидок, которые исключаются при расчете.
   * @return calculationExclusionDiscountTypes
  **/
  @ApiModelProperty(value = "Типы скидок, которые исключаются при расчете.")
  public List<CalculationExclusionDiscountTypesEnum> getCalculationExclusionDiscountTypes() {
    return calculationExclusionDiscountTypes;
  }

  public void setCalculationExclusionDiscountTypes(List<CalculationExclusionDiscountTypesEnum> calculationExclusionDiscountTypes) {
    this.calculationExclusionDiscountTypes = calculationExclusionDiscountTypes;
  }

  public CashbackForWeightActionDto order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Порядковый номер действия в цепочке.
   * @return order
  **/
  @ApiModelProperty(value = "Порядковый номер действия в цепочке.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public CashbackForWeightActionDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id действия в цепочке.
   * @return id
  **/
  @ApiModelProperty(value = "Id действия в цепочке.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CashbackForWeightActionDto lifeTimeDefinitionId(Integer lifeTimeDefinitionId) {
    this.lifeTimeDefinitionId = lifeTimeDefinitionId;
    return this;
  }

   /**
   * Время жизни.
   * @return lifeTimeDefinitionId
  **/
  @ApiModelProperty(value = "Время жизни.")
  public Integer getLifeTimeDefinitionId() {
    return lifeTimeDefinitionId;
  }

  public void setLifeTimeDefinitionId(Integer lifeTimeDefinitionId) {
    this.lifeTimeDefinitionId = lifeTimeDefinitionId;
  }

  public CashbackForWeightActionDto currencyExternalId(String currencyExternalId) {
    this.currencyExternalId = currencyExternalId;
    return this;
  }

   /**
   * Внешний идентификатор валюты.
   * @return currencyExternalId
  **/
  @ApiModelProperty(value = "Внешний идентификатор валюты.")
  public String getCurrencyExternalId() {
    return currencyExternalId;
  }

  public void setCurrencyExternalId(String currencyExternalId) {
    this.currencyExternalId = currencyExternalId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashbackForWeightActionDto cashbackForWeightActionDto = (CashbackForWeightActionDto) o;
    return Objects.equals(this.percent, cashbackForWeightActionDto.percent) &&
        Objects.equals(this.amountPerUnit, cashbackForWeightActionDto.amountPerUnit) &&
        Objects.equals(this.amountPerUniqueSku, cashbackForWeightActionDto.amountPerUniqueSku) &&
        Objects.equals(this.pricePerUnit, cashbackForWeightActionDto.pricePerUnit) &&
        Objects.equals(this.amount, cashbackForWeightActionDto.amount) &&
        Objects.equals(this.amountMeasure, cashbackForWeightActionDto.amountMeasure) &&
        Objects.equals(this.amountPerMeasure, cashbackForWeightActionDto.amountPerMeasure) &&
        Objects.equals(this.amountWeight, cashbackForWeightActionDto.amountWeight) &&
        Objects.equals(this.amountPerWeight, cashbackForWeightActionDto.amountPerWeight) &&
        Objects.equals(this.price, cashbackForWeightActionDto.price) &&
        Objects.equals(this.attributeDiscount, cashbackForWeightActionDto.attributeDiscount) &&
        Objects.equals(this.distributeToAll, cashbackForWeightActionDto.distributeToAll) &&
        Objects.equals(this.discountType, cashbackForWeightActionDto.discountType) &&
        Objects.equals(this.calculationExclusionDiscountTypes, cashbackForWeightActionDto.calculationExclusionDiscountTypes) &&
        Objects.equals(this.order, cashbackForWeightActionDto.order) &&
        Objects.equals(this.id, cashbackForWeightActionDto.id) &&
        Objects.equals(this.lifeTimeDefinitionId, cashbackForWeightActionDto.lifeTimeDefinitionId) &&
        Objects.equals(this.currencyExternalId, cashbackForWeightActionDto.currencyExternalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percent, amountPerUnit, amountPerUniqueSku, pricePerUnit, amount, amountMeasure, amountPerMeasure, amountWeight, amountPerWeight, price, attributeDiscount, distributeToAll, discountType, calculationExclusionDiscountTypes, order, id, lifeTimeDefinitionId, currencyExternalId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashbackForWeightActionDto {\n");
    
    sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
    sb.append("    amountPerUnit: ").append(toIndentedString(amountPerUnit)).append("\n");
    sb.append("    amountPerUniqueSku: ").append(toIndentedString(amountPerUniqueSku)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountMeasure: ").append(toIndentedString(amountMeasure)).append("\n");
    sb.append("    amountPerMeasure: ").append(toIndentedString(amountPerMeasure)).append("\n");
    sb.append("    amountWeight: ").append(toIndentedString(amountWeight)).append("\n");
    sb.append("    amountPerWeight: ").append(toIndentedString(amountPerWeight)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    attributeDiscount: ").append(toIndentedString(attributeDiscount)).append("\n");
    sb.append("    distributeToAll: ").append(toIndentedString(distributeToAll)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    calculationExclusionDiscountTypes: ").append(toIndentedString(calculationExclusionDiscountTypes)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lifeTimeDefinitionId: ").append(toIndentedString(lifeTimeDefinitionId)).append("\n");
    sb.append("    currencyExternalId: ").append(toIndentedString(currencyExternalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

