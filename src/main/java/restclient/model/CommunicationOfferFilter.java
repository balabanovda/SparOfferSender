/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Фильтр для акции.
 */
@ApiModel(description = "Фильтр для акции.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CommunicationOfferFilter {
  @JsonProperty("merchantId")
  private Integer merchantId = null;

  /**
   * Статус акции.
   */
  public enum OfferStateEnum {
    ACTIVE("Active"),
    
    COMMINGSOON("CommingSoon");

    private String value;

    OfferStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OfferStateEnum fromValue(String text) {
      for (OfferStateEnum b : OfferStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("offerState")
  private OfferStateEnum offerState = null;

  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("count")
  private Integer count = null;

  /**
   * Тип акции.
   */
  public enum TypeEnum {
    ORIGINAL("Original"),
    
    PERSONALGOODS("PersonalGoods"),
    
    PERSONALOFFER("PersonalOffer"),
    
    ALL("All");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * Фильтр по категории.
   */
  public enum CategoryFilterTypeEnum {
    SELECTBYLOGICALNAME("SelectByLogicalName"),
    
    IGNOREBYLOGICALNAME("IgnoreByLogicalName"),
    
    SELECTUNCATEGORIZED("SelectUncategorized");

    private String value;

    CategoryFilterTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryFilterTypeEnum fromValue(String text) {
      for (CategoryFilterTypeEnum b : CategoryFilterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("categoryFilterType")
  private CategoryFilterTypeEnum categoryFilterType = null;

  @JsonProperty("categoryLogicalNames")
  private List<String> categoryLogicalNames = null;

  /**
   * Статус акции.
   */
  public enum CommunicationOfferStateEnum {
    ACTIVE("Active"),
    
    COMMINGSOON("CommingSoon");

    private String value;

    CommunicationOfferStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CommunicationOfferStateEnum fromValue(String text) {
      for (CommunicationOfferStateEnum b : CommunicationOfferStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("communicationOfferState")
  private CommunicationOfferStateEnum communicationOfferState = null;

  @JsonProperty("fromDate")
  private OffsetDateTime fromDate = null;

  @JsonProperty("toDate")
  private OffsetDateTime toDate = null;

  @JsonProperty("brandIds")
  private List<Integer> brandIds = null;

  @JsonProperty("categoriesIds")
  private List<Integer> categoriesIds = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Признак удаления.
   */
  public enum IsArchivedEnum {
    ARCHIVED("Archived"),
    
    NONARCHIVED("NonArchived");

    private String value;

    IsArchivedEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsArchivedEnum fromValue(String text) {
      for (IsArchivedEnum b : IsArchivedEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("isArchived")
  private IsArchivedEnum isArchived = null;

  @JsonProperty("priorityMin")
  private Integer priorityMin = null;

  @JsonProperty("priorityMax")
  private Integer priorityMax = null;

  public CommunicationOfferFilter merchantId(Integer merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Id магазина.
   * @return merchantId
  **/
  @ApiModelProperty(value = "Id магазина.")
  public Integer getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(Integer merchantId) {
    this.merchantId = merchantId;
  }

  public CommunicationOfferFilter offerState(OfferStateEnum offerState) {
    this.offerState = offerState;
    return this;
  }

   /**
   * Статус акции.
   * @return offerState
  **/
  @ApiModelProperty(value = "Статус акции.")
  public OfferStateEnum getOfferState() {
    return offerState;
  }

  public void setOfferState(OfferStateEnum offerState) {
    this.offerState = offerState;
  }

  public CommunicationOfferFilter from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * Со скольки.
   * @return from
  **/
  @ApiModelProperty(value = "Со скольки.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public CommunicationOfferFilter count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Сколько.
   * @return count
  **/
  @ApiModelProperty(value = "Сколько.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public CommunicationOfferFilter type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип акции.
   * @return type
  **/
  @ApiModelProperty(value = "Тип акции.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CommunicationOfferFilter categoryFilterType(CategoryFilterTypeEnum categoryFilterType) {
    this.categoryFilterType = categoryFilterType;
    return this;
  }

   /**
   * Фильтр по категории.
   * @return categoryFilterType
  **/
  @ApiModelProperty(value = "Фильтр по категории.")
  public CategoryFilterTypeEnum getCategoryFilterType() {
    return categoryFilterType;
  }

  public void setCategoryFilterType(CategoryFilterTypeEnum categoryFilterType) {
    this.categoryFilterType = categoryFilterType;
  }

  public CommunicationOfferFilter categoryLogicalNames(List<String> categoryLogicalNames) {
    this.categoryLogicalNames = categoryLogicalNames;
    return this;
  }

  public CommunicationOfferFilter addCategoryLogicalNamesItem(String categoryLogicalNamesItem) {
    if (this.categoryLogicalNames == null) {
      this.categoryLogicalNames = new ArrayList<>();
    }
    this.categoryLogicalNames.add(categoryLogicalNamesItem);
    return this;
  }

   /**
   * Логические имена категорий.
   * @return categoryLogicalNames
  **/
  @ApiModelProperty(value = "Логические имена категорий.")
  public List<String> getCategoryLogicalNames() {
    return categoryLogicalNames;
  }

  public void setCategoryLogicalNames(List<String> categoryLogicalNames) {
    this.categoryLogicalNames = categoryLogicalNames;
  }

  public CommunicationOfferFilter communicationOfferState(CommunicationOfferStateEnum communicationOfferState) {
    this.communicationOfferState = communicationOfferState;
    return this;
  }

   /**
   * Статус акции.
   * @return communicationOfferState
  **/
  @ApiModelProperty(value = "Статус акции.")
  public CommunicationOfferStateEnum getCommunicationOfferState() {
    return communicationOfferState;
  }

  public void setCommunicationOfferState(CommunicationOfferStateEnum communicationOfferState) {
    this.communicationOfferState = communicationOfferState;
  }

  public CommunicationOfferFilter fromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Дата С.
   * @return fromDate
  **/
  @ApiModelProperty(value = "Дата С.")
  public OffsetDateTime getFromDate() {
    return fromDate;
  }

  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }

  public CommunicationOfferFilter toDate(OffsetDateTime toDate) {
    this.toDate = toDate;
    return this;
  }

   /**
   * Дата По.
   * @return toDate
  **/
  @ApiModelProperty(value = "Дата По.")
  public OffsetDateTime getToDate() {
    return toDate;
  }

  public void setToDate(OffsetDateTime toDate) {
    this.toDate = toDate;
  }

  public CommunicationOfferFilter brandIds(List<Integer> brandIds) {
    this.brandIds = brandIds;
    return this;
  }

  public CommunicationOfferFilter addBrandIdsItem(Integer brandIdsItem) {
    if (this.brandIds == null) {
      this.brandIds = new ArrayList<>();
    }
    this.brandIds.add(brandIdsItem);
    return this;
  }

   /**
   * Набор идентификаторов брендов.
   * @return brandIds
  **/
  @ApiModelProperty(value = "Набор идентификаторов брендов.")
  public List<Integer> getBrandIds() {
    return brandIds;
  }

  public void setBrandIds(List<Integer> brandIds) {
    this.brandIds = brandIds;
  }

  public CommunicationOfferFilter categoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public CommunicationOfferFilter addCategoriesIdsItem(Integer categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new ArrayList<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

   /**
   * Набор идентификаторов категорий рекламных материалов.
   * @return categoriesIds
  **/
  @ApiModelProperty(value = "Набор идентификаторов категорий рекламных материалов.")
  public List<Integer> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }

  public CommunicationOfferFilter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Подстрока для поиска по имени.
   * @return name
  **/
  @ApiModelProperty(value = "Подстрока для поиска по имени.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CommunicationOfferFilter isArchived(IsArchivedEnum isArchived) {
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Признак удаления.
   * @return isArchived
  **/
  @ApiModelProperty(value = "Признак удаления.")
  public IsArchivedEnum getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(IsArchivedEnum isArchived) {
    this.isArchived = isArchived;
  }

  public CommunicationOfferFilter priorityMin(Integer priorityMin) {
    this.priorityMin = priorityMin;
    return this;
  }

   /**
   * Минимальный приоритет.
   * @return priorityMin
  **/
  @ApiModelProperty(value = "Минимальный приоритет.")
  public Integer getPriorityMin() {
    return priorityMin;
  }

  public void setPriorityMin(Integer priorityMin) {
    this.priorityMin = priorityMin;
  }

  public CommunicationOfferFilter priorityMax(Integer priorityMax) {
    this.priorityMax = priorityMax;
    return this;
  }

   /**
   * Максимальный приоритет.
   * @return priorityMax
  **/
  @ApiModelProperty(value = "Максимальный приоритет.")
  public Integer getPriorityMax() {
    return priorityMax;
  }

  public void setPriorityMax(Integer priorityMax) {
    this.priorityMax = priorityMax;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationOfferFilter communicationOfferFilter = (CommunicationOfferFilter) o;
    return Objects.equals(this.merchantId, communicationOfferFilter.merchantId) &&
        Objects.equals(this.offerState, communicationOfferFilter.offerState) &&
        Objects.equals(this.from, communicationOfferFilter.from) &&
        Objects.equals(this.count, communicationOfferFilter.count) &&
        Objects.equals(this.type, communicationOfferFilter.type) &&
        Objects.equals(this.categoryFilterType, communicationOfferFilter.categoryFilterType) &&
        Objects.equals(this.categoryLogicalNames, communicationOfferFilter.categoryLogicalNames) &&
        Objects.equals(this.communicationOfferState, communicationOfferFilter.communicationOfferState) &&
        Objects.equals(this.fromDate, communicationOfferFilter.fromDate) &&
        Objects.equals(this.toDate, communicationOfferFilter.toDate) &&
        Objects.equals(this.brandIds, communicationOfferFilter.brandIds) &&
        Objects.equals(this.categoriesIds, communicationOfferFilter.categoriesIds) &&
        Objects.equals(this.name, communicationOfferFilter.name) &&
        Objects.equals(this.isArchived, communicationOfferFilter.isArchived) &&
        Objects.equals(this.priorityMin, communicationOfferFilter.priorityMin) &&
        Objects.equals(this.priorityMax, communicationOfferFilter.priorityMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, offerState, from, count, type, categoryFilterType, categoryLogicalNames, communicationOfferState, fromDate, toDate, brandIds, categoriesIds, name, isArchived, priorityMin, priorityMax);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationOfferFilter {\n");
    
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    offerState: ").append(toIndentedString(offerState)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    categoryFilterType: ").append(toIndentedString(categoryFilterType)).append("\n");
    sb.append("    categoryLogicalNames: ").append(toIndentedString(categoryLogicalNames)).append("\n");
    sb.append("    communicationOfferState: ").append(toIndentedString(communicationOfferState)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    brandIds: ").append(toIndentedString(brandIds)).append("\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    priorityMin: ").append(toIndentedString(priorityMin)).append("\n");
    sb.append("    priorityMax: ").append(toIndentedString(priorityMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

