/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Действие акции \&quot;Счётчик\&quot;.
 */
@ApiModel(description = "Действие акции \"Счётчик\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CounterActionDto {
  @JsonProperty("order")
  private Integer order = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("increment")
  private Double increment = null;

  /**
   * Переменная, значение которой будет шагом счетчика.
   */
  public enum IncrementVariableEnum {
    CHEQUESUM("ChequeSum"),
    
    PARTNERDISCOUNTSUM("PartnerDiscountSum"),
    
    FULLCHEQUESUM("FullChequeSum"),
    
    PAYMENTSUM("PaymentSum"),
    
    UNPROCESSEDPOSITIONSSUM("UnprocessedPositionsSum"),
    
    UNPROCESSEDPOSITIONSWITHOUTPAYMENTSUM("UnprocessedPositionsWithoutPaymentSum"),
    
    COUNTGOODS("CountGoods"),
    
    RESULTCHEQUESUM("ResultChequeSum"),
    
    RESULTCHEQUEPAYMENTSUM("ResultChequePaymentSum"),
    
    REFUNDCHEQUESUM("RefundChequeSum"),
    
    REFUNDPAYMENTSUM("RefundPaymentSum"),
    
    RESULTREFUNDCHEQUESUM("ResultRefundChequeSum"),
    
    RESULTREFUNDCHEQUEPAYMENTSUM("ResultRefundChequePaymentSum"),
    
    RESULTCHEQUEDISCOUNTSUM("ResultChequeDiscountSum"),
    
    RESULTREFUNDCHEQUEDISCOUNTSUM("ResultRefundChequeDiscountSum"),
    
    RESULTCHEQUEPAYMENTDISCOUNTSUM("ResultChequePaymentDiscountSum"),
    
    RESULTREFUNDCHEQUEPAYMENTDISCOUNTSUM("ResultRefundChequePaymentDiscountSum"),
    
    PURCHASEUSEDCOUPONSCOUPONS("PurchaseUsedCouponsCoupons"),
    
    COUNTFILTEREDGOODS("CountFilteredGoods"),
    
    COUNTFILTEREDPOSITIONS("CountFilteredPositions"),
    
    PAYMENTAMOUNT("PaymentAmount"),
    
    CASHPAYMENTSUM("CashPaymentSum");

    private String value;

    IncrementVariableEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IncrementVariableEnum fromValue(String text) {
      for (IncrementVariableEnum b : IncrementVariableEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("incrementVariable")
  private IncrementVariableEnum incrementVariable = null;

  @JsonProperty("isAdding")
  private Boolean isAdding = null;

  /**
   * Тип инкремента счетчика.
   */
  public enum IncrementTypeEnum {
    CONSTANT("Constant"),
    
    CONTEXTVARIABLE("ContextVariable"),
    
    ISSUEDPREFERENCE("IssuedPreference");

    private String value;

    IncrementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IncrementTypeEnum fromValue(String text) {
      for (IncrementTypeEnum b : IncrementTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("incrementType")
  private IncrementTypeEnum incrementType = null;

  @JsonProperty("counter")
  private BaseCounterDto counter = null;

  public CounterActionDto order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Порядковый номер действия в цепочке.
   * @return order
  **/
  @ApiModelProperty(value = "Порядковый номер действия в цепочке.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public CounterActionDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id действия в цепочке.
   * @return id
  **/
  @ApiModelProperty(value = "Id действия в цепочке.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CounterActionDto increment(Double increment) {
    this.increment = increment;
    return this;
  }

   /**
   * Значение шага счетчика.
   * @return increment
  **/
  @ApiModelProperty(value = "Значение шага счетчика.")
  public Double getIncrement() {
    return increment;
  }

  public void setIncrement(Double increment) {
    this.increment = increment;
  }

  public CounterActionDto incrementVariable(IncrementVariableEnum incrementVariable) {
    this.incrementVariable = incrementVariable;
    return this;
  }

   /**
   * Переменная, значение которой будет шагом счетчика.
   * @return incrementVariable
  **/
  @ApiModelProperty(value = "Переменная, значение которой будет шагом счетчика.")
  public IncrementVariableEnum getIncrementVariable() {
    return incrementVariable;
  }

  public void setIncrementVariable(IncrementVariableEnum incrementVariable) {
    this.incrementVariable = incrementVariable;
  }

  public CounterActionDto isAdding(Boolean isAdding) {
    this.isAdding = isAdding;
    return this;
  }

   /**
   * Признак, что переменная будет увеличивать значение счетчика.
   * @return isAdding
  **/
  @ApiModelProperty(value = "Признак, что переменная будет увеличивать значение счетчика.")
  public Boolean isIsAdding() {
    return isAdding;
  }

  public void setIsAdding(Boolean isAdding) {
    this.isAdding = isAdding;
  }

  public CounterActionDto incrementType(IncrementTypeEnum incrementType) {
    this.incrementType = incrementType;
    return this;
  }

   /**
   * Тип инкремента счетчика.
   * @return incrementType
  **/
  @ApiModelProperty(value = "Тип инкремента счетчика.")
  public IncrementTypeEnum getIncrementType() {
    return incrementType;
  }

  public void setIncrementType(IncrementTypeEnum incrementType) {
    this.incrementType = incrementType;
  }

  public CounterActionDto counter(BaseCounterDto counter) {
    this.counter = counter;
    return this;
  }

   /**
   * Cчетчик.
   * @return counter
  **/
  @ApiModelProperty(value = "Cчетчик.")
  public BaseCounterDto getCounter() {
    return counter;
  }

  public void setCounter(BaseCounterDto counter) {
    this.counter = counter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterActionDto counterActionDto = (CounterActionDto) o;
    return Objects.equals(this.order, counterActionDto.order) &&
        Objects.equals(this.id, counterActionDto.id) &&
        Objects.equals(this.increment, counterActionDto.increment) &&
        Objects.equals(this.incrementVariable, counterActionDto.incrementVariable) &&
        Objects.equals(this.isAdding, counterActionDto.isAdding) &&
        Objects.equals(this.incrementType, counterActionDto.incrementType) &&
        Objects.equals(this.counter, counterActionDto.counter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, id, increment, incrementVariable, isAdding, incrementType, counter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterActionDto {\n");
    
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("    incrementVariable: ").append(toIndentedString(incrementVariable)).append("\n");
    sb.append("    isAdding: ").append(toIndentedString(isAdding)).append("\n");
    sb.append("    incrementType: ").append(toIndentedString(incrementType)).append("\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

