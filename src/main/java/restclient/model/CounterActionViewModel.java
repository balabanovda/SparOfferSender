/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель для редактирования действия \&quot;Счётчик\&quot;.
 */
@ApiModel(description = "Модель для редактирования действия \"Счётчик\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CounterActionViewModel {
  @JsonProperty("actionId")
  private Integer actionId = null;

  @JsonProperty("order")
  private Integer order = null;

  @JsonProperty("counterId")
  private Integer counterId = null;

  @JsonProperty("targets")
  private List<String> targets = null;

  @JsonProperty("increment")
  private Double increment = null;

  /**
   * Тип инкремента.
   */
  public enum IncrementTypeEnum {
    CONSTANT("Constant"),
    
    CONTEXTVARIABLE("ContextVariable"),
    
    ISSUEDPREFERENCE("IssuedPreference");

    private String value;

    IncrementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IncrementTypeEnum fromValue(String text) {
      for (IncrementTypeEnum b : IncrementTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("incrementType")
  private IncrementTypeEnum incrementType = null;

  @JsonProperty("variable")
  private OfferEventContextVariableViewModel variable = null;

  @JsonProperty("isAdding")
  private Boolean isAdding = null;

  public CounterActionViewModel actionId(Integer actionId) {
    this.actionId = actionId;
    return this;
  }

   /**
   * Id действия. Если указан, редактируется действие, иначе создается новое.
   * @return actionId
  **/
  @ApiModelProperty(value = "Id действия. Если указан, редактируется действие, иначе создается новое.")
  public Integer getActionId() {
    return actionId;
  }

  public void setActionId(Integer actionId) {
    this.actionId = actionId;
  }

  public CounterActionViewModel order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Порядок действия.
   * @return order
  **/
  @ApiModelProperty(value = "Порядок действия.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public CounterActionViewModel counterId(Integer counterId) {
    this.counterId = counterId;
    return this;
  }

   /**
   * Привязанный счётчик.
   * @return counterId
  **/
  @ApiModelProperty(value = "Привязанный счётчик.")
  public Integer getCounterId() {
    return counterId;
  }

  public void setCounterId(Integer counterId) {
    this.counterId = counterId;
  }

  public CounterActionViewModel targets(List<String> targets) {
    this.targets = targets;
    return this;
  }

  public CounterActionViewModel addTargetsItem(String targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Список моделей для счётчика.
   * @return targets
  **/
  @ApiModelProperty(value = "Список моделей для счётчика.")
  public List<String> getTargets() {
    return targets;
  }

  public void setTargets(List<String> targets) {
    this.targets = targets;
  }

  public CounterActionViewModel increment(Double increment) {
    this.increment = increment;
    return this;
  }

   /**
   * Величина изменения счётчика.
   * @return increment
  **/
  @ApiModelProperty(value = "Величина изменения счётчика.")
  public Double getIncrement() {
    return increment;
  }

  public void setIncrement(Double increment) {
    this.increment = increment;
  }

  public CounterActionViewModel incrementType(IncrementTypeEnum incrementType) {
    this.incrementType = incrementType;
    return this;
  }

   /**
   * Тип инкремента.
   * @return incrementType
  **/
  @ApiModelProperty(value = "Тип инкремента.")
  public IncrementTypeEnum getIncrementType() {
    return incrementType;
  }

  public void setIncrementType(IncrementTypeEnum incrementType) {
    this.incrementType = incrementType;
  }

  public CounterActionViewModel variable(OfferEventContextVariableViewModel variable) {
    this.variable = variable;
    return this;
  }

   /**
   * Контекстная переменная.
   * @return variable
  **/
  @ApiModelProperty(value = "Контекстная переменная.")
  public OfferEventContextVariableViewModel getVariable() {
    return variable;
  }

  public void setVariable(OfferEventContextVariableViewModel variable) {
    this.variable = variable;
  }

  public CounterActionViewModel isAdding(Boolean isAdding) {
    this.isAdding = isAdding;
    return this;
  }

   /**
   * Знак, который будет применяться к значению контекстной переменнной.
   * @return isAdding
  **/
  @ApiModelProperty(value = "Знак, который будет применяться к значению контекстной переменнной.")
  public Boolean isIsAdding() {
    return isAdding;
  }

  public void setIsAdding(Boolean isAdding) {
    this.isAdding = isAdding;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterActionViewModel counterActionViewModel = (CounterActionViewModel) o;
    return Objects.equals(this.actionId, counterActionViewModel.actionId) &&
        Objects.equals(this.order, counterActionViewModel.order) &&
        Objects.equals(this.counterId, counterActionViewModel.counterId) &&
        Objects.equals(this.targets, counterActionViewModel.targets) &&
        Objects.equals(this.increment, counterActionViewModel.increment) &&
        Objects.equals(this.incrementType, counterActionViewModel.incrementType) &&
        Objects.equals(this.variable, counterActionViewModel.variable) &&
        Objects.equals(this.isAdding, counterActionViewModel.isAdding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, order, counterId, targets, increment, incrementType, variable, isAdding);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterActionViewModel {\n");
    
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    counterId: ").append(toIndentedString(counterId)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("    incrementType: ").append(toIndentedString(incrementType)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    isAdding: ").append(toIndentedString(isAdding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

