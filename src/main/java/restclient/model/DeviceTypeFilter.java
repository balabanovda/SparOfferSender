/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Фильтр типов касс.
 */
@ApiModel(description = "Фильтр типов касс.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class DeviceTypeFilter {
  @JsonProperty("searchedText")
  private String searchedText = null;

  /**
   * Версия поиска.
   */
  public enum VersionEnum {
    VERSION20("Version20"),
    
    VERSION22("Version22"),
    
    VERSION30("Version30"),
    
    VERSION32("Version32");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VersionEnum fromValue(String text) {
      for (VersionEnum b : VersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("version")
  private VersionEnum version = null;

  /**
   * Состояние.
   */
  public enum ConditionEnum {
    ARCHIVED("Archived"),
    
    NONARCHIVED("NonArchived");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConditionEnum fromValue(String text) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("condition")
  private ConditionEnum condition = null;

  /**
   * Тип кодировки.
   */
  public enum EncodingTypeEnum {
    ASCII("ASCII"),
    
    CP866("Cp866"),
    
    KOI8R("Koi8r"),
    
    WINDOWS1251("Windows1251"),
    
    UNICODE("Unicode"),
    
    UTF7("UTF7"),
    
    UTF8("UTF8"),
    
    UTF32("UTF32");

    private String value;

    EncodingTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EncodingTypeEnum fromValue(String text) {
      for (EncodingTypeEnum b : EncodingTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("encodingType")
  private EncodingTypeEnum encodingType = null;

  @JsonProperty("sortingIds")
  private List<Integer> sortingIds = null;

  public DeviceTypeFilter searchedText(String searchedText) {
    this.searchedText = searchedText;
    return this;
  }

   /**
   * Текст поиска.
   * @return searchedText
  **/
  @ApiModelProperty(value = "Текст поиска.")
  public String getSearchedText() {
    return searchedText;
  }

  public void setSearchedText(String searchedText) {
    this.searchedText = searchedText;
  }

  public DeviceTypeFilter version(VersionEnum version) {
    this.version = version;
    return this;
  }

   /**
   * Версия поиска.
   * @return version
  **/
  @ApiModelProperty(value = "Версия поиска.")
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }

  public DeviceTypeFilter condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Состояние.
   * @return condition
  **/
  @ApiModelProperty(value = "Состояние.")
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }

  public DeviceTypeFilter encodingType(EncodingTypeEnum encodingType) {
    this.encodingType = encodingType;
    return this;
  }

   /**
   * Тип кодировки.
   * @return encodingType
  **/
  @ApiModelProperty(value = "Тип кодировки.")
  public EncodingTypeEnum getEncodingType() {
    return encodingType;
  }

  public void setEncodingType(EncodingTypeEnum encodingType) {
    this.encodingType = encodingType;
  }

  public DeviceTypeFilter sortingIds(List<Integer> sortingIds) {
    this.sortingIds = sortingIds;
    return this;
  }

  public DeviceTypeFilter addSortingIdsItem(Integer sortingIdsItem) {
    if (this.sortingIds == null) {
      this.sortingIds = new ArrayList<>();
    }
    this.sortingIds.add(sortingIdsItem);
    return this;
  }

   /**
   * Идентификаторы типов касс, выводимых в начале списка.
   * @return sortingIds
  **/
  @ApiModelProperty(value = "Идентификаторы типов касс, выводимых в начале списка.")
  public List<Integer> getSortingIds() {
    return sortingIds;
  }

  public void setSortingIds(List<Integer> sortingIds) {
    this.sortingIds = sortingIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceTypeFilter deviceTypeFilter = (DeviceTypeFilter) o;
    return Objects.equals(this.searchedText, deviceTypeFilter.searchedText) &&
        Objects.equals(this.version, deviceTypeFilter.version) &&
        Objects.equals(this.condition, deviceTypeFilter.condition) &&
        Objects.equals(this.encodingType, deviceTypeFilter.encodingType) &&
        Objects.equals(this.sortingIds, deviceTypeFilter.sortingIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchedText, version, condition, encodingType, sortingIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceTypeFilter {\n");
    
    sb.append("    searchedText: ").append(toIndentedString(searchedText)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    encodingType: ").append(toIndentedString(encodingType)).append("\n");
    sb.append("    sortingIds: ").append(toIndentedString(sortingIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

