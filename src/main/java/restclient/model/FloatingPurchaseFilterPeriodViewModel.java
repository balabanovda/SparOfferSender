/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * View-модель для плавающего периода в фильтре по покупкам.
 */
@ApiModel(description = "View-модель для плавающего периода в фильтре по покупкам.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class FloatingPurchaseFilterPeriodViewModel {
  @JsonProperty("dateIntervalDuration")
  private Integer dateIntervalDuration = null;

  /**
   * Единица времени плавающего периода для даты покупки.
   */
  public enum DateIntervalTimeUnitEnum {
    MINUTE("Minute"),
    
    HOUR("Hour"),
    
    DAY("Day"),
    
    WEEK("Week"),
    
    MONTH("Month"),
    
    YEAR("Year");

    private String value;

    DateIntervalTimeUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DateIntervalTimeUnitEnum fromValue(String text) {
      for (DateIntervalTimeUnitEnum b : DateIntervalTimeUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("dateIntervalTimeUnit")
  private DateIntervalTimeUnitEnum dateIntervalTimeUnit = null;

  /**
   * Уточнение границ плавающего периода для даты покупки.
   */
  public enum DateIntervalRoundTypeEnum {
    NONE("None"),
    
    BEGIN("Begin"),
    
    END("End");

    private String value;

    DateIntervalRoundTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DateIntervalRoundTypeEnum fromValue(String text) {
      for (DateIntervalRoundTypeEnum b : DateIntervalRoundTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("dateIntervalRoundType")
  private DateIntervalRoundTypeEnum dateIntervalRoundType = null;

  public FloatingPurchaseFilterPeriodViewModel dateIntervalDuration(Integer dateIntervalDuration) {
    this.dateIntervalDuration = dateIntervalDuration;
    return this;
  }

   /**
   * Продолжительность плавающего периода для даты покупки.
   * @return dateIntervalDuration
  **/
  @ApiModelProperty(value = "Продолжительность плавающего периода для даты покупки.")
  public Integer getDateIntervalDuration() {
    return dateIntervalDuration;
  }

  public void setDateIntervalDuration(Integer dateIntervalDuration) {
    this.dateIntervalDuration = dateIntervalDuration;
  }

  public FloatingPurchaseFilterPeriodViewModel dateIntervalTimeUnit(DateIntervalTimeUnitEnum dateIntervalTimeUnit) {
    this.dateIntervalTimeUnit = dateIntervalTimeUnit;
    return this;
  }

   /**
   * Единица времени плавающего периода для даты покупки.
   * @return dateIntervalTimeUnit
  **/
  @ApiModelProperty(value = "Единица времени плавающего периода для даты покупки.")
  public DateIntervalTimeUnitEnum getDateIntervalTimeUnit() {
    return dateIntervalTimeUnit;
  }

  public void setDateIntervalTimeUnit(DateIntervalTimeUnitEnum dateIntervalTimeUnit) {
    this.dateIntervalTimeUnit = dateIntervalTimeUnit;
  }

  public FloatingPurchaseFilterPeriodViewModel dateIntervalRoundType(DateIntervalRoundTypeEnum dateIntervalRoundType) {
    this.dateIntervalRoundType = dateIntervalRoundType;
    return this;
  }

   /**
   * Уточнение границ плавающего периода для даты покупки.
   * @return dateIntervalRoundType
  **/
  @ApiModelProperty(value = "Уточнение границ плавающего периода для даты покупки.")
  public DateIntervalRoundTypeEnum getDateIntervalRoundType() {
    return dateIntervalRoundType;
  }

  public void setDateIntervalRoundType(DateIntervalRoundTypeEnum dateIntervalRoundType) {
    this.dateIntervalRoundType = dateIntervalRoundType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloatingPurchaseFilterPeriodViewModel floatingPurchaseFilterPeriodViewModel = (FloatingPurchaseFilterPeriodViewModel) o;
    return Objects.equals(this.dateIntervalDuration, floatingPurchaseFilterPeriodViewModel.dateIntervalDuration) &&
        Objects.equals(this.dateIntervalTimeUnit, floatingPurchaseFilterPeriodViewModel.dateIntervalTimeUnit) &&
        Objects.equals(this.dateIntervalRoundType, floatingPurchaseFilterPeriodViewModel.dateIntervalRoundType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateIntervalDuration, dateIntervalTimeUnit, dateIntervalRoundType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloatingPurchaseFilterPeriodViewModel {\n");
    
    sb.append("    dateIntervalDuration: ").append(toIndentedString(dateIntervalDuration)).append("\n");
    sb.append("    dateIntervalTimeUnit: ").append(toIndentedString(dateIntervalTimeUnit)).append("\n");
    sb.append("    dateIntervalRoundType: ").append(toIndentedString(dateIntervalRoundType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

