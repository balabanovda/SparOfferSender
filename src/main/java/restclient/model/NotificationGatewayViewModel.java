/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Шлюз.
 */
@ApiModel(description = "Шлюз.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class NotificationGatewayViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("logicalName")
  private String logicalName = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("login")
  private String login = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("prefix")
  private String prefix = null;

  @JsonProperty("enableSsl")
  private Boolean enableSsl = null;

  @JsonProperty("checkStatusAllowed")
  private Boolean checkStatusAllowed = null;

  @JsonProperty("protocolType")
  private String protocolType = null;

  /**
   * Тип шлюза.
   */
  public enum TypeEnum {
    SMS("Sms"),
    
    EMAIL("Email"),
    
    PUSH("Push"),
    
    VIBER("Viber"),
    
    SOCIALSNETWORKS("SocialsNetworks"),
    
    CHATBOT("ChatBot");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("isDeleted")
  private Boolean isDeleted = null;

  @JsonProperty("price")
  private Double price = null;

  @JsonProperty("proxy")
  private NotificationProxyBriefViewModel proxy = null;

  @JsonProperty("additionalParams")
  private String additionalParams = null;

  public NotificationGatewayViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор сущности.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор сущности.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public NotificationGatewayViewModel logicalName(String logicalName) {
    this.logicalName = logicalName;
    return this;
  }

   /**
   * Логическое имя.
   * @return logicalName
  **/
  @ApiModelProperty(value = "Логическое имя.")
  public String getLogicalName() {
    return logicalName;
  }

  public void setLogicalName(String logicalName) {
    this.logicalName = logicalName;
  }

  public NotificationGatewayViewModel url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Url.
   * @return url
  **/
  @ApiModelProperty(value = "Url.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public NotificationGatewayViewModel login(String login) {
    this.login = login;
    return this;
  }

   /**
   * Логин.
   * @return login
  **/
  @ApiModelProperty(value = "Логин.")
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }

  public NotificationGatewayViewModel password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Пароль.
   * @return password
  **/
  @ApiModelProperty(value = "Пароль.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public NotificationGatewayViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Имя.
   * @return name
  **/
  @ApiModelProperty(value = "Имя.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NotificationGatewayViewModel prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

   /**
   * Префикс.
   * @return prefix
  **/
  @ApiModelProperty(value = "Префикс.")
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }

  public NotificationGatewayViewModel enableSsl(Boolean enableSsl) {
    this.enableSsl = enableSsl;
    return this;
  }

   /**
   * Поддержка SSL.
   * @return enableSsl
  **/
  @ApiModelProperty(value = "Поддержка SSL.")
  public Boolean isEnableSsl() {
    return enableSsl;
  }

  public void setEnableSsl(Boolean enableSsl) {
    this.enableSsl = enableSsl;
  }

  public NotificationGatewayViewModel checkStatusAllowed(Boolean checkStatusAllowed) {
    this.checkStatusAllowed = checkStatusAllowed;
    return this;
  }

   /**
   * Поддерживает ли шлюз проверку статуса отправлений.
   * @return checkStatusAllowed
  **/
  @ApiModelProperty(value = "Поддерживает ли шлюз проверку статуса отправлений.")
  public Boolean isCheckStatusAllowed() {
    return checkStatusAllowed;
  }

  public void setCheckStatusAllowed(Boolean checkStatusAllowed) {
    this.checkStatusAllowed = checkStatusAllowed;
  }

  public NotificationGatewayViewModel protocolType(String protocolType) {
    this.protocolType = protocolType;
    return this;
  }

   /**
   * Протокол.
   * @return protocolType
  **/
  @ApiModelProperty(value = "Протокол.")
  public String getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(String protocolType) {
    this.protocolType = protocolType;
  }

  public NotificationGatewayViewModel type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип шлюза.
   * @return type
  **/
  @ApiModelProperty(value = "Тип шлюза.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public NotificationGatewayViewModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Признак удаления.
   * @return isDeleted
  **/
  @ApiModelProperty(value = "Признак удаления.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public NotificationGatewayViewModel price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Стоимость одного сообщения.
   * @return price
  **/
  @ApiModelProperty(value = "Стоимость одного сообщения.")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public NotificationGatewayViewModel proxy(NotificationProxyBriefViewModel proxy) {
    this.proxy = proxy;
    return this;
  }

   /**
   * Прокси.
   * @return proxy
  **/
  @ApiModelProperty(value = "Прокси.")
  public NotificationProxyBriefViewModel getProxy() {
    return proxy;
  }

  public void setProxy(NotificationProxyBriefViewModel proxy) {
    this.proxy = proxy;
  }

  public NotificationGatewayViewModel additionalParams(String additionalParams) {
    this.additionalParams = additionalParams;
    return this;
  }

   /**
   * Дополнительные параметры.
   * @return additionalParams
  **/
  @ApiModelProperty(value = "Дополнительные параметры.")
  public String getAdditionalParams() {
    return additionalParams;
  }

  public void setAdditionalParams(String additionalParams) {
    this.additionalParams = additionalParams;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationGatewayViewModel notificationGatewayViewModel = (NotificationGatewayViewModel) o;
    return Objects.equals(this.id, notificationGatewayViewModel.id) &&
        Objects.equals(this.logicalName, notificationGatewayViewModel.logicalName) &&
        Objects.equals(this.url, notificationGatewayViewModel.url) &&
        Objects.equals(this.login, notificationGatewayViewModel.login) &&
        Objects.equals(this.password, notificationGatewayViewModel.password) &&
        Objects.equals(this.name, notificationGatewayViewModel.name) &&
        Objects.equals(this.prefix, notificationGatewayViewModel.prefix) &&
        Objects.equals(this.enableSsl, notificationGatewayViewModel.enableSsl) &&
        Objects.equals(this.checkStatusAllowed, notificationGatewayViewModel.checkStatusAllowed) &&
        Objects.equals(this.protocolType, notificationGatewayViewModel.protocolType) &&
        Objects.equals(this.type, notificationGatewayViewModel.type) &&
        Objects.equals(this.isDeleted, notificationGatewayViewModel.isDeleted) &&
        Objects.equals(this.price, notificationGatewayViewModel.price) &&
        Objects.equals(this.proxy, notificationGatewayViewModel.proxy) &&
        Objects.equals(this.additionalParams, notificationGatewayViewModel.additionalParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, logicalName, url, login, password, name, prefix, enableSsl, checkStatusAllowed, protocolType, type, isDeleted, price, proxy, additionalParams);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationGatewayViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logicalName: ").append(toIndentedString(logicalName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    enableSsl: ").append(toIndentedString(enableSsl)).append("\n");
    sb.append("    checkStatusAllowed: ").append(toIndentedString(checkStatusAllowed)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    additionalParams: ").append(toIndentedString(additionalParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

