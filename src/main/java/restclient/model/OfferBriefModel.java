/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель для акции.
 */
@ApiModel(description = "Модель для акции.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class OfferBriefModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("beginTime")
  private OffsetDateTime beginTime = null;

  @JsonProperty("endTime")
  private OffsetDateTime endTime = null;

  /**
   * Доступные операции над акцией.
   */
  public enum OperationsEnum {
    NONE("None"),
    
    VIEW("View"),
    
    START("Start"),
    
    STOP("Stop"),
    
    EDIT("Edit"),
    
    COPY("Copy"),
    
    DELETE("Delete"),
    
    ACCEPT("Accept"),
    
    APPLY("Apply"),
    
    RESTOREFROMARCHIVE("RestoreFromArchive");

    private String value;

    OperationsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationsEnum fromValue(String text) {
      for (OperationsEnum b : OperationsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("operations")
  private OperationsEnum operations = null;

  @JsonProperty("creationDate")
  private OffsetDateTime creationDate = null;

  @JsonProperty("lastChangeDate")
  private OffsetDateTime lastChangeDate = null;

  @JsonProperty("creator")
  private String creator = null;

  @JsonProperty("lastChangeUser")
  private String lastChangeUser = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("partners")
  private List<PartnerModel> partners = null;

  @JsonProperty("isSum")
  private Boolean isSum = null;

  @JsonProperty("priority")
  private Integer priority = null;

  @JsonProperty("isDraft")
  private Boolean isDraft = null;

  @JsonProperty("isDefault")
  private Boolean isDefault = null;

  @JsonProperty("offerCategory")
  private OfferCategoryViewModel offerCategory = null;

  /**
   * Состояния версии как черновика              None &#x3D; 0, версия не является черновиком (уже была подтверждена)              Edit &#x3D; 1, версия является редактируемым в данный момент черновиком              Applied &#x3D; 2, версия является черновиком, требующим подтверждения или отклонения (вносить изменения нельзя)              Rejected &#x3D; 3,  версия является редактируемым в данный момент черновиком, отклоненным на этапе подтверждения.
   */
  public enum DraftStateEnum {
    NONE("None"),
    
    EDIT("Edit"),
    
    APPLIED("Applied"),
    
    REJECTED("Rejected");

    private String value;

    DraftStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DraftStateEnum fromValue(String text) {
      for (DraftStateEnum b : DraftStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("draftState")
  private DraftStateEnum draftState = null;

  @JsonProperty("draftLastChangeDate")
  private OffsetDateTime draftLastChangeDate = null;

  @JsonProperty("externalID")
  private String externalID = null;

  /**
   * Состояние акции во времени.
   */
  public enum ViewStateEnum {
    FUTURE("Future"),
    
    PRESENT("Present"),
    
    PAST("Past");

    private String value;

    ViewStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ViewStateEnum fromValue(String text) {
      for (ViewStateEnum b : ViewStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("viewState")
  private ViewStateEnum viewState = null;

  /**
   * Состояние акции.
   */
  public enum StateEnum {
    RUN("Run"),
    
    STOP("Stop"),
    
    ARCHIVED("Archived");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("planned")
  private Boolean planned = null;

  @JsonProperty("draftRejectReason")
  private String draftRejectReason = null;

  @JsonProperty("loyaltyPrograms")
  private List<PartnerLoyaltyProgramModel> loyaltyPrograms = null;

  public OfferBriefModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * ID акции.
   * @return id
  **/
  @ApiModelProperty(value = "ID акции.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public OfferBriefModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Название акции.
   * @return name
  **/
  @ApiModelProperty(value = "Название акции.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OfferBriefModel beginTime(OffsetDateTime beginTime) {
    this.beginTime = beginTime;
    return this;
  }

   /**
   * Время начала акции.
   * @return beginTime
  **/
  @ApiModelProperty(value = "Время начала акции.")
  public OffsetDateTime getBeginTime() {
    return beginTime;
  }

  public void setBeginTime(OffsetDateTime beginTime) {
    this.beginTime = beginTime;
  }

  public OfferBriefModel endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Дата окончания действия акции. Если это пустое значение, то акция действует бесконечно долго, начиная с BeginTime.
   * @return endTime
  **/
  @ApiModelProperty(value = "Дата окончания действия акции. Если это пустое значение, то акция действует бесконечно долго, начиная с BeginTime.")
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }

  public OfferBriefModel operations(OperationsEnum operations) {
    this.operations = operations;
    return this;
  }

   /**
   * Доступные операции над акцией.
   * @return operations
  **/
  @ApiModelProperty(value = "Доступные операции над акцией.")
  public OperationsEnum getOperations() {
    return operations;
  }

  public void setOperations(OperationsEnum operations) {
    this.operations = operations;
  }

  public OfferBriefModel creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Дата создания акции.
   * @return creationDate
  **/
  @ApiModelProperty(value = "Дата создания акции.")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public OfferBriefModel lastChangeDate(OffsetDateTime lastChangeDate) {
    this.lastChangeDate = lastChangeDate;
    return this;
  }

   /**
   * Дата последних изменений.
   * @return lastChangeDate
  **/
  @ApiModelProperty(value = "Дата последних изменений.")
  public OffsetDateTime getLastChangeDate() {
    return lastChangeDate;
  }

  public void setLastChangeDate(OffsetDateTime lastChangeDate) {
    this.lastChangeDate = lastChangeDate;
  }

  public OfferBriefModel creator(String creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Создатель акции.
   * @return creator
  **/
  @ApiModelProperty(value = "Создатель акции.")
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }

  public OfferBriefModel lastChangeUser(String lastChangeUser) {
    this.lastChangeUser = lastChangeUser;
    return this;
  }

   /**
   * Пользователь, который последним изменял акцию.
   * @return lastChangeUser
  **/
  @ApiModelProperty(value = "Пользователь, который последним изменял акцию.")
  public String getLastChangeUser() {
    return lastChangeUser;
  }

  public void setLastChangeUser(String lastChangeUser) {
    this.lastChangeUser = lastChangeUser;
  }

  public OfferBriefModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Описание акции.
   * @return description
  **/
  @ApiModelProperty(value = "Описание акции.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public OfferBriefModel partners(List<PartnerModel> partners) {
    this.partners = partners;
    return this;
  }

  public OfferBriefModel addPartnersItem(PartnerModel partnersItem) {
    if (this.partners == null) {
      this.partners = new ArrayList<>();
    }
    this.partners.add(partnersItem);
    return this;
  }

   /**
   * Список партнеров акции.
   * @return partners
  **/
  @ApiModelProperty(value = "Список партнеров акции.")
  public List<PartnerModel> getPartners() {
    return partners;
  }

  public void setPartners(List<PartnerModel> partners) {
    this.partners = partners;
  }

  public OfferBriefModel isSum(Boolean isSum) {
    this.isSum = isSum;
    return this;
  }

   /**
   * Является ли акция суммируемой.
   * @return isSum
  **/
  @ApiModelProperty(value = "Является ли акция суммируемой.")
  public Boolean isIsSum() {
    return isSum;
  }

  public void setIsSum(Boolean isSum) {
    this.isSum = isSum;
  }

  public OfferBriefModel priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Приоритет акции.
   * @return priority
  **/
  @ApiModelProperty(value = "Приоритет акции.")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public OfferBriefModel isDraft(Boolean isDraft) {
    this.isDraft = isDraft;
    return this;
  }

   /**
   * Является ли черновиком.
   * @return isDraft
  **/
  @ApiModelProperty(value = "Является ли черновиком.")
  public Boolean isIsDraft() {
    return isDraft;
  }

  public void setIsDraft(Boolean isDraft) {
    this.isDraft = isDraft;
  }

  public OfferBriefModel isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Является ли акция базовой (по умолчанию).
   * @return isDefault
  **/
  @ApiModelProperty(value = "Является ли акция базовой (по умолчанию).")
  public Boolean isIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }

  public OfferBriefModel offerCategory(OfferCategoryViewModel offerCategory) {
    this.offerCategory = offerCategory;
    return this;
  }

   /**
   * Категория акции.
   * @return offerCategory
  **/
  @ApiModelProperty(value = "Категория акции.")
  public OfferCategoryViewModel getOfferCategory() {
    return offerCategory;
  }

  public void setOfferCategory(OfferCategoryViewModel offerCategory) {
    this.offerCategory = offerCategory;
  }

  public OfferBriefModel draftState(DraftStateEnum draftState) {
    this.draftState = draftState;
    return this;
  }

   /**
   * Состояния версии как черновика              None &#x3D; 0, версия не является черновиком (уже была подтверждена)              Edit &#x3D; 1, версия является редактируемым в данный момент черновиком              Applied &#x3D; 2, версия является черновиком, требующим подтверждения или отклонения (вносить изменения нельзя)              Rejected &#x3D; 3,  версия является редактируемым в данный момент черновиком, отклоненным на этапе подтверждения.
   * @return draftState
  **/
  @ApiModelProperty(value = "Состояния версии как черновика              None = 0, версия не является черновиком (уже была подтверждена)              Edit = 1, версия является редактируемым в данный момент черновиком              Applied = 2, версия является черновиком, требующим подтверждения или отклонения (вносить изменения нельзя)              Rejected = 3,  версия является редактируемым в данный момент черновиком, отклоненным на этапе подтверждения.")
  public DraftStateEnum getDraftState() {
    return draftState;
  }

  public void setDraftState(DraftStateEnum draftState) {
    this.draftState = draftState;
  }

  public OfferBriefModel draftLastChangeDate(OffsetDateTime draftLastChangeDate) {
    this.draftLastChangeDate = draftLastChangeDate;
    return this;
  }

   /**
   * Дата последнего сохранения черновика.
   * @return draftLastChangeDate
  **/
  @ApiModelProperty(value = "Дата последнего сохранения черновика.")
  public OffsetDateTime getDraftLastChangeDate() {
    return draftLastChangeDate;
  }

  public void setDraftLastChangeDate(OffsetDateTime draftLastChangeDate) {
    this.draftLastChangeDate = draftLastChangeDate;
  }

  public OfferBriefModel externalID(String externalID) {
    this.externalID = externalID;
    return this;
  }

   /**
   * ID акции для внешних система (например если акция была загружена через шлюз).
   * @return externalID
  **/
  @ApiModelProperty(value = "ID акции для внешних система (например если акция была загружена через шлюз).")
  public String getExternalID() {
    return externalID;
  }

  public void setExternalID(String externalID) {
    this.externalID = externalID;
  }

  public OfferBriefModel viewState(ViewStateEnum viewState) {
    this.viewState = viewState;
    return this;
  }

   /**
   * Состояние акции во времени.
   * @return viewState
  **/
  @ApiModelProperty(value = "Состояние акции во времени.")
  public ViewStateEnum getViewState() {
    return viewState;
  }

  public void setViewState(ViewStateEnum viewState) {
    this.viewState = viewState;
  }

  public OfferBriefModel state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Состояние акции.
   * @return state
  **/
  @ApiModelProperty(value = "Состояние акции.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public OfferBriefModel planned(Boolean planned) {
    this.planned = planned;
    return this;
  }

   /**
   * Если значение флага &#x3D; true, то акция еще не имеет подтвержденных версий и в периоде требуется выводить слово \&quot;Планируется\&quot;.
   * @return planned
  **/
  @ApiModelProperty(value = "Если значение флага = true, то акция еще не имеет подтвержденных версий и в периоде требуется выводить слово \"Планируется\".")
  public Boolean isPlanned() {
    return planned;
  }

  public void setPlanned(Boolean planned) {
    this.planned = planned;
  }

  public OfferBriefModel draftRejectReason(String draftRejectReason) {
    this.draftRejectReason = draftRejectReason;
    return this;
  }

   /**
   * Причина отклонения версии как черновика акции.
   * @return draftRejectReason
  **/
  @ApiModelProperty(value = "Причина отклонения версии как черновика акции.")
  public String getDraftRejectReason() {
    return draftRejectReason;
  }

  public void setDraftRejectReason(String draftRejectReason) {
    this.draftRejectReason = draftRejectReason;
  }

  public OfferBriefModel loyaltyPrograms(List<PartnerLoyaltyProgramModel> loyaltyPrograms) {
    this.loyaltyPrograms = loyaltyPrograms;
    return this;
  }

  public OfferBriefModel addLoyaltyProgramsItem(PartnerLoyaltyProgramModel loyaltyProgramsItem) {
    if (this.loyaltyPrograms == null) {
      this.loyaltyPrograms = new ArrayList<>();
    }
    this.loyaltyPrograms.add(loyaltyProgramsItem);
    return this;
  }

   /**
   * Программы лояльности.
   * @return loyaltyPrograms
  **/
  @ApiModelProperty(value = "Программы лояльности.")
  public List<PartnerLoyaltyProgramModel> getLoyaltyPrograms() {
    return loyaltyPrograms;
  }

  public void setLoyaltyPrograms(List<PartnerLoyaltyProgramModel> loyaltyPrograms) {
    this.loyaltyPrograms = loyaltyPrograms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferBriefModel offerBriefModel = (OfferBriefModel) o;
    return Objects.equals(this.id, offerBriefModel.id) &&
        Objects.equals(this.name, offerBriefModel.name) &&
        Objects.equals(this.beginTime, offerBriefModel.beginTime) &&
        Objects.equals(this.endTime, offerBriefModel.endTime) &&
        Objects.equals(this.operations, offerBriefModel.operations) &&
        Objects.equals(this.creationDate, offerBriefModel.creationDate) &&
        Objects.equals(this.lastChangeDate, offerBriefModel.lastChangeDate) &&
        Objects.equals(this.creator, offerBriefModel.creator) &&
        Objects.equals(this.lastChangeUser, offerBriefModel.lastChangeUser) &&
        Objects.equals(this.description, offerBriefModel.description) &&
        Objects.equals(this.partners, offerBriefModel.partners) &&
        Objects.equals(this.isSum, offerBriefModel.isSum) &&
        Objects.equals(this.priority, offerBriefModel.priority) &&
        Objects.equals(this.isDraft, offerBriefModel.isDraft) &&
        Objects.equals(this.isDefault, offerBriefModel.isDefault) &&
        Objects.equals(this.offerCategory, offerBriefModel.offerCategory) &&
        Objects.equals(this.draftState, offerBriefModel.draftState) &&
        Objects.equals(this.draftLastChangeDate, offerBriefModel.draftLastChangeDate) &&
        Objects.equals(this.externalID, offerBriefModel.externalID) &&
        Objects.equals(this.viewState, offerBriefModel.viewState) &&
        Objects.equals(this.state, offerBriefModel.state) &&
        Objects.equals(this.planned, offerBriefModel.planned) &&
        Objects.equals(this.draftRejectReason, offerBriefModel.draftRejectReason) &&
        Objects.equals(this.loyaltyPrograms, offerBriefModel.loyaltyPrograms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, beginTime, endTime, operations, creationDate, lastChangeDate, creator, lastChangeUser, description, partners, isSum, priority, isDraft, isDefault, offerCategory, draftState, draftLastChangeDate, externalID, viewState, state, planned, draftRejectReason, loyaltyPrograms);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferBriefModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    beginTime: ").append(toIndentedString(beginTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastChangeDate: ").append(toIndentedString(lastChangeDate)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    lastChangeUser: ").append(toIndentedString(lastChangeUser)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    partners: ").append(toIndentedString(partners)).append("\n");
    sb.append("    isSum: ").append(toIndentedString(isSum)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    offerCategory: ").append(toIndentedString(offerCategory)).append("\n");
    sb.append("    draftState: ").append(toIndentedString(draftState)).append("\n");
    sb.append("    draftLastChangeDate: ").append(toIndentedString(draftLastChangeDate)).append("\n");
    sb.append("    externalID: ").append(toIndentedString(externalID)).append("\n");
    sb.append("    viewState: ").append(toIndentedString(viewState)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    planned: ").append(toIndentedString(planned)).append("\n");
    sb.append("    draftRejectReason: ").append(toIndentedString(draftRejectReason)).append("\n");
    sb.append("    loyaltyPrograms: ").append(toIndentedString(loyaltyPrograms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

