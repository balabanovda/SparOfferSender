/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель фильтра для списка акций.
 */
@ApiModel(description = "Модель фильтра для списка акций.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class OffersListFilter {
  @JsonProperty("fromDate")
  private OffsetDateTime fromDate = null;

  @JsonProperty("toDate")
  private OffsetDateTime toDate = null;

  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("count")
  private Integer count = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("merchantIds")
  private List<Integer> merchantIds = null;

  @JsonProperty("creatorIds")
  private List<Integer> creatorIds = null;

  /**
   * Gets or Sets viewStates
   */
  public enum ViewStatesEnum {
    FUTURE("Future"),
    
    PRESENT("Present"),
    
    PAST("Past");

    private String value;

    ViewStatesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ViewStatesEnum fromValue(String text) {
      for (ViewStatesEnum b : ViewStatesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("viewStates")
  private List<ViewStatesEnum> viewStates = null;

  /**
   * Колонка для сортировки.
   */
  public enum SortColumnEnum {
    PRIORITY("Priority"),
    
    NAME("Name"),
    
    BEGINTIME("BeginTime"),
    
    ENDTIME("EndTime"),
    
    STATE("State"),
    
    ATTACHDATE("AttachDate");

    private String value;

    SortColumnEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SortColumnEnum fromValue(String text) {
      for (SortColumnEnum b : SortColumnEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("sortColumn")
  private SortColumnEnum sortColumn = null;

  @JsonProperty("direction")
  private Boolean direction = null;

  /**
   * Gets or Sets states
   */
  public enum StatesEnum {
    RUN("Run"),
    
    STOP("Stop"),
    
    ARCHIVED("Archived");

    private String value;

    StatesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatesEnum fromValue(String text) {
      for (StatesEnum b : StatesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("states")
  private List<StatesEnum> states = null;

  @JsonProperty("partnerIds")
  private List<Integer> partnerIds = null;

  @JsonProperty("categoryIds")
  private List<Integer> categoryIds = null;

  @JsonProperty("priority")
  private PriorityRange priority = null;

  @JsonProperty("marketingCampaignId")
  private Integer marketingCampaignId = null;

  @JsonProperty("includeMarketingCampaignId")
  private Boolean includeMarketingCampaignId = null;

  @JsonProperty("loyaltyProgramIds")
  private List<Integer> loyaltyProgramIds = null;

  @JsonProperty("excludeMarketingCampaign")
  private Boolean excludeMarketingCampaign = null;

  public OffersListFilter fromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Дата С.
   * @return fromDate
  **/
  @ApiModelProperty(value = "Дата С.")
  public OffsetDateTime getFromDate() {
    return fromDate;
  }

  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }

  public OffersListFilter toDate(OffsetDateTime toDate) {
    this.toDate = toDate;
    return this;
  }

   /**
   * Дата По.
   * @return toDate
  **/
  @ApiModelProperty(value = "Дата По.")
  public OffsetDateTime getToDate() {
    return toDate;
  }

  public void setToDate(OffsetDateTime toDate) {
    this.toDate = toDate;
  }

  public OffersListFilter from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * С какого элемента брать.
   * @return from
  **/
  @ApiModelProperty(value = "С какого элемента брать.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public OffersListFilter count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Сколько элементов брать.
   * @return count
  **/
  @ApiModelProperty(value = "Сколько элементов брать.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public OffersListFilter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Подстрока для поиска по имени.
   * @return name
  **/
  @ApiModelProperty(value = "Подстрока для поиска по имени.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OffersListFilter merchantIds(List<Integer> merchantIds) {
    this.merchantIds = merchantIds;
    return this;
  }

  public OffersListFilter addMerchantIdsItem(Integer merchantIdsItem) {
    if (this.merchantIds == null) {
      this.merchantIds = new ArrayList<>();
    }
    this.merchantIds.add(merchantIdsItem);
    return this;
  }

   /**
   * Список id магазинов для фильтрации.
   * @return merchantIds
  **/
  @ApiModelProperty(value = "Список id магазинов для фильтрации.")
  public List<Integer> getMerchantIds() {
    return merchantIds;
  }

  public void setMerchantIds(List<Integer> merchantIds) {
    this.merchantIds = merchantIds;
  }

  public OffersListFilter creatorIds(List<Integer> creatorIds) {
    this.creatorIds = creatorIds;
    return this;
  }

  public OffersListFilter addCreatorIdsItem(Integer creatorIdsItem) {
    if (this.creatorIds == null) {
      this.creatorIds = new ArrayList<>();
    }
    this.creatorIds.add(creatorIdsItem);
    return this;
  }

   /**
   * Список id создателей акций для фильтрации.
   * @return creatorIds
  **/
  @ApiModelProperty(value = "Список id создателей акций для фильтрации.")
  public List<Integer> getCreatorIds() {
    return creatorIds;
  }

  public void setCreatorIds(List<Integer> creatorIds) {
    this.creatorIds = creatorIds;
  }

  public OffersListFilter viewStates(List<ViewStatesEnum> viewStates) {
    this.viewStates = viewStates;
    return this;
  }

  public OffersListFilter addViewStatesItem(ViewStatesEnum viewStatesItem) {
    if (this.viewStates == null) {
      this.viewStates = new ArrayList<>();
    }
    this.viewStates.add(viewStatesItem);
    return this;
  }

   /**
   * Список состояний акции для фильтрации.
   * @return viewStates
  **/
  @ApiModelProperty(value = "Список состояний акции для фильтрации.")
  public List<ViewStatesEnum> getViewStates() {
    return viewStates;
  }

  public void setViewStates(List<ViewStatesEnum> viewStates) {
    this.viewStates = viewStates;
  }

  public OffersListFilter sortColumn(SortColumnEnum sortColumn) {
    this.sortColumn = sortColumn;
    return this;
  }

   /**
   * Колонка для сортировки.
   * @return sortColumn
  **/
  @ApiModelProperty(value = "Колонка для сортировки.")
  public SortColumnEnum getSortColumn() {
    return sortColumn;
  }

  public void setSortColumn(SortColumnEnum sortColumn) {
    this.sortColumn = sortColumn;
  }

  public OffersListFilter direction(Boolean direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Направление сортировки.
   * @return direction
  **/
  @ApiModelProperty(value = "Направление сортировки.")
  public Boolean isDirection() {
    return direction;
  }

  public void setDirection(Boolean direction) {
    this.direction = direction;
  }

  public OffersListFilter states(List<StatesEnum> states) {
    this.states = states;
    return this;
  }

  public OffersListFilter addStatesItem(StatesEnum statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Список состояний акции для фильтрации.
   * @return states
  **/
  @ApiModelProperty(value = "Список состояний акции для фильтрации.")
  public List<StatesEnum> getStates() {
    return states;
  }

  public void setStates(List<StatesEnum> states) {
    this.states = states;
  }

  public OffersListFilter partnerIds(List<Integer> partnerIds) {
    this.partnerIds = partnerIds;
    return this;
  }

  public OffersListFilter addPartnerIdsItem(Integer partnerIdsItem) {
    if (this.partnerIds == null) {
      this.partnerIds = new ArrayList<>();
    }
    this.partnerIds.add(partnerIdsItem);
    return this;
  }

   /**
   * Список Id партнеров для фильтрации.
   * @return partnerIds
  **/
  @ApiModelProperty(value = "Список Id партнеров для фильтрации.")
  public List<Integer> getPartnerIds() {
    return partnerIds;
  }

  public void setPartnerIds(List<Integer> partnerIds) {
    this.partnerIds = partnerIds;
  }

  public OffersListFilter categoryIds(List<Integer> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public OffersListFilter addCategoryIdsItem(Integer categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

   /**
   * Список Id категорий акций.
   * @return categoryIds
  **/
  @ApiModelProperty(value = "Список Id категорий акций.")
  public List<Integer> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(List<Integer> categoryIds) {
    this.categoryIds = categoryIds;
  }

  public OffersListFilter priority(PriorityRange priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Диапазон значений приоритета у акций.
   * @return priority
  **/
  @ApiModelProperty(value = "Диапазон значений приоритета у акций.")
  public PriorityRange getPriority() {
    return priority;
  }

  public void setPriority(PriorityRange priority) {
    this.priority = priority;
  }

  public OffersListFilter marketingCampaignId(Integer marketingCampaignId) {
    this.marketingCampaignId = marketingCampaignId;
    return this;
  }

   /**
   * Идентификатор маркетинговой кампании.
   * @return marketingCampaignId
  **/
  @ApiModelProperty(value = "Идентификатор маркетинговой кампании.")
  public Integer getMarketingCampaignId() {
    return marketingCampaignId;
  }

  public void setMarketingCampaignId(Integer marketingCampaignId) {
    this.marketingCampaignId = marketingCampaignId;
  }

  public OffersListFilter includeMarketingCampaignId(Boolean includeMarketingCampaignId) {
    this.includeMarketingCampaignId = includeMarketingCampaignId;
    return this;
  }

   /**
   * Значение, указывающее, включать или исключать акции с заданной МК.
   * @return includeMarketingCampaignId
  **/
  @ApiModelProperty(value = "Значение, указывающее, включать или исключать акции с заданной МК.")
  public Boolean isIncludeMarketingCampaignId() {
    return includeMarketingCampaignId;
  }

  public void setIncludeMarketingCampaignId(Boolean includeMarketingCampaignId) {
    this.includeMarketingCampaignId = includeMarketingCampaignId;
  }

  public OffersListFilter loyaltyProgramIds(List<Integer> loyaltyProgramIds) {
    this.loyaltyProgramIds = loyaltyProgramIds;
    return this;
  }

  public OffersListFilter addLoyaltyProgramIdsItem(Integer loyaltyProgramIdsItem) {
    if (this.loyaltyProgramIds == null) {
      this.loyaltyProgramIds = new ArrayList<>();
    }
    this.loyaltyProgramIds.add(loyaltyProgramIdsItem);
    return this;
  }

   /**
   * Список Id программ лояльности для фильтрации.
   * @return loyaltyProgramIds
  **/
  @ApiModelProperty(value = "Список Id программ лояльности для фильтрации.")
  public List<Integer> getLoyaltyProgramIds() {
    return loyaltyProgramIds;
  }

  public void setLoyaltyProgramIds(List<Integer> loyaltyProgramIds) {
    this.loyaltyProgramIds = loyaltyProgramIds;
  }

  public OffersListFilter excludeMarketingCampaign(Boolean excludeMarketingCampaign) {
    this.excludeMarketingCampaign = excludeMarketingCampaign;
    return this;
  }

   /**
   * Исключает все акции для которых установлена компания.
   * @return excludeMarketingCampaign
  **/
  @ApiModelProperty(value = "Исключает все акции для которых установлена компания.")
  public Boolean isExcludeMarketingCampaign() {
    return excludeMarketingCampaign;
  }

  public void setExcludeMarketingCampaign(Boolean excludeMarketingCampaign) {
    this.excludeMarketingCampaign = excludeMarketingCampaign;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OffersListFilter offersListFilter = (OffersListFilter) o;
    return Objects.equals(this.fromDate, offersListFilter.fromDate) &&
        Objects.equals(this.toDate, offersListFilter.toDate) &&
        Objects.equals(this.from, offersListFilter.from) &&
        Objects.equals(this.count, offersListFilter.count) &&
        Objects.equals(this.name, offersListFilter.name) &&
        Objects.equals(this.merchantIds, offersListFilter.merchantIds) &&
        Objects.equals(this.creatorIds, offersListFilter.creatorIds) &&
        Objects.equals(this.viewStates, offersListFilter.viewStates) &&
        Objects.equals(this.sortColumn, offersListFilter.sortColumn) &&
        Objects.equals(this.direction, offersListFilter.direction) &&
        Objects.equals(this.states, offersListFilter.states) &&
        Objects.equals(this.partnerIds, offersListFilter.partnerIds) &&
        Objects.equals(this.categoryIds, offersListFilter.categoryIds) &&
        Objects.equals(this.priority, offersListFilter.priority) &&
        Objects.equals(this.marketingCampaignId, offersListFilter.marketingCampaignId) &&
        Objects.equals(this.includeMarketingCampaignId, offersListFilter.includeMarketingCampaignId) &&
        Objects.equals(this.loyaltyProgramIds, offersListFilter.loyaltyProgramIds) &&
        Objects.equals(this.excludeMarketingCampaign, offersListFilter.excludeMarketingCampaign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromDate, toDate, from, count, name, merchantIds, creatorIds, viewStates, sortColumn, direction, states, partnerIds, categoryIds, priority, marketingCampaignId, includeMarketingCampaignId, loyaltyProgramIds, excludeMarketingCampaign);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OffersListFilter {\n");
    
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    merchantIds: ").append(toIndentedString(merchantIds)).append("\n");
    sb.append("    creatorIds: ").append(toIndentedString(creatorIds)).append("\n");
    sb.append("    viewStates: ").append(toIndentedString(viewStates)).append("\n");
    sb.append("    sortColumn: ").append(toIndentedString(sortColumn)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    partnerIds: ").append(toIndentedString(partnerIds)).append("\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    marketingCampaignId: ").append(toIndentedString(marketingCampaignId)).append("\n");
    sb.append("    includeMarketingCampaignId: ").append(toIndentedString(includeMarketingCampaignId)).append("\n");
    sb.append("    loyaltyProgramIds: ").append(toIndentedString(loyaltyProgramIds)).append("\n");
    sb.append("    excludeMarketingCampaign: ").append(toIndentedString(excludeMarketingCampaign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

