/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Требование к паролю.
 */
@ApiModel(description = "Требование к паролю.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class PasswordRequirementViewModel {
  /**
   * Тип правила.
   */
  public enum TypeEnum {
    LENGTH("Length"),
    
    LATINCHARACTERS("LatinCharacters"),
    
    CAPITALLETTERS("CapitalLetters"),
    
    NUMBERS("Numbers"),
    
    SPECIALCHARACTERS("SpecialCharacters");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("expression")
  private String expression = null;

  @JsonProperty("description")
  private String description = null;

  public PasswordRequirementViewModel type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип правила.
   * @return type
  **/
  @ApiModelProperty(value = "Тип правила.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PasswordRequirementViewModel expression(String expression) {
    this.expression = expression;
    return this;
  }

   /**
   * Регулярное выражение для проверки.
   * @return expression
  **/
  @ApiModelProperty(value = "Регулярное выражение для проверки.")
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }

  public PasswordRequirementViewModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Описание требования.
   * @return description
  **/
  @ApiModelProperty(value = "Описание требования.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordRequirementViewModel passwordRequirementViewModel = (PasswordRequirementViewModel) o;
    return Objects.equals(this.type, passwordRequirementViewModel.type) &&
        Objects.equals(this.expression, passwordRequirementViewModel.expression) &&
        Objects.equals(this.description, passwordRequirementViewModel.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, expression, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordRequirementViewModel {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

