/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель идентификатора.
 */
@ApiModel(description = "Модель идентификатора.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class PersonIdentifierModel {
  @JsonProperty("id")
  private Integer id = null;

  /**
   * Тип идентификатора.
   */
  public enum TypeEnum {
    CARDNUMBER("CardNumber"),
    
    LOGIN("Login"),
    
    CARDBARCODE("CardBarCode"),
    
    CARDTRACK1("CardTrack1"),
    
    CARDTRACK2("CardTrack2"),
    
    CARDTRACK3("CardTrack3"),
    
    UID("UID"),
    
    DATA("Data"),
    
    ANONYMOUS("Anonymous"),
    
    PHONE("Phone"),
    
    EMAIL("Email"),
    
    OAUTH("OAuth"),
    
    OAUTHAPPLICATION("OAuthApplication"),
    
    COUPON("Coupon"),
    
    PARTNERCOUPON("PartnerCoupon"),
    
    PHONEHASH("PhoneHash"),
    
    APPLEWALLETCARD("AppleWalletCard"),
    
    GPAYWALLETCARD("GpayWalletCard");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("text")
  private String text = null;

  /**
   * Состояние идентификатора.
   */
  public enum StateEnum {
    NORMAL("Normal"),
    
    BLOCK("Block"),
    
    DELETED("Deleted");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("roles")
  private List<PersonIdentifierRoleModel> roles = null;

  @JsonProperty("permissions")
  private List<PersonIdentifierPermissionModel> permissions = null;

  @JsonProperty("isLimited")
  private Boolean isLimited = null;

  public PersonIdentifierModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id идентификатора.
   * @return id
  **/
  @ApiModelProperty(value = "Id идентификатора.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public PersonIdentifierModel type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип идентификатора.
   * @return type
  **/
  @ApiModelProperty(value = "Тип идентификатора.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PersonIdentifierModel text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Текст идентификатора.
   * @return text
  **/
  @ApiModelProperty(value = "Текст идентификатора.")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public PersonIdentifierModel state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Состояние идентификатора.
   * @return state
  **/
  @ApiModelProperty(value = "Состояние идентификатора.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public PersonIdentifierModel roles(List<PersonIdentifierRoleModel> roles) {
    this.roles = roles;
    return this;
  }

  public PersonIdentifierModel addRolesItem(PersonIdentifierRoleModel rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Набор ролей, закрепленные за идентификатором.
   * @return roles
  **/
  @ApiModelProperty(value = "Набор ролей, закрепленные за идентификатором.")
  public List<PersonIdentifierRoleModel> getRoles() {
    return roles;
  }

  public void setRoles(List<PersonIdentifierRoleModel> roles) {
    this.roles = roles;
  }

  public PersonIdentifierModel permissions(List<PersonIdentifierPermissionModel> permissions) {
    this.permissions = permissions;
    return this;
  }

  public PersonIdentifierModel addPermissionsItem(PersonIdentifierPermissionModel permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Набор прав доступа, закрепленные за идентификатором вне роли.
   * @return permissions
  **/
  @ApiModelProperty(value = "Набор прав доступа, закрепленные за идентификатором вне роли.")
  public List<PersonIdentifierPermissionModel> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PersonIdentifierPermissionModel> permissions) {
    this.permissions = permissions;
  }

  public PersonIdentifierModel isLimited(Boolean isLimited) {
    this.isLimited = isLimited;
    return this;
  }

   /**
   * Признак ограниченого количества сеансов.
   * @return isLimited
  **/
  @ApiModelProperty(value = "Признак ограниченого количества сеансов.")
  public Boolean isIsLimited() {
    return isLimited;
  }

  public void setIsLimited(Boolean isLimited) {
    this.isLimited = isLimited;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonIdentifierModel personIdentifierModel = (PersonIdentifierModel) o;
    return Objects.equals(this.id, personIdentifierModel.id) &&
        Objects.equals(this.type, personIdentifierModel.type) &&
        Objects.equals(this.text, personIdentifierModel.text) &&
        Objects.equals(this.state, personIdentifierModel.state) &&
        Objects.equals(this.roles, personIdentifierModel.roles) &&
        Objects.equals(this.permissions, personIdentifierModel.permissions) &&
        Objects.equals(this.isLimited, personIdentifierModel.isLimited);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, text, state, roles, permissions, isLimited);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonIdentifierModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    isLimited: ").append(toIndentedString(isLimited)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

