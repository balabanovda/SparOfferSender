/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * ViewModel для фильтра \&quot;Покупки\&quot;.
 */
@ApiModel(description = "ViewModel для фильтра \"Покупки\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class PurchaseFilterViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("isDeletedFilterType")
  private Boolean isDeletedFilterType = null;

  @JsonProperty("merchants")
  private List<MerchantViewModel> merchants = null;

  @JsonProperty("dateFixedPeriod")
  private FixedPurchaseFilterPeriodViewModel dateFixedPeriod = null;

  @JsonProperty("dateFloatingPeriod")
  private FloatingPurchaseFilterPeriodViewModel dateFloatingPeriod = null;

  /**
   * Gets or Sets daysOfWeek
   */
  public enum DaysOfWeekEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    DaysOfWeekEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DaysOfWeekEnum fromValue(String text) {
      for (DaysOfWeekEnum b : DaysOfWeekEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("daysOfWeek")
  private List<DaysOfWeekEnum> daysOfWeek = null;

  @JsonProperty("beginTime")
  private HourMinuteModel beginTime = null;

  @JsonProperty("endTime")
  private HourMinuteModel endTime = null;

  /**
   * Операция сравнения суммы чека.
   */
  public enum ChequeSumOperationEnum {
    MORE("More"),
    
    LESS("Less"),
    
    EQUALS("Equals"),
    
    BETWEEN("Between"),
    
    MOREOREQUAL("MoreOrEqual"),
    
    LESSOREQUAL("LessOrEqual"),
    
    BETWEENLESSEQUAL("BetweenLessEqual"),
    
    BETWEENMOREEQUAL("BetweenMoreEqual"),
    
    BETWEENEQUAL("BetweenEqual"),
    
    EACH("Each");

    private String value;

    ChequeSumOperationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ChequeSumOperationEnum fromValue(String text) {
      for (ChequeSumOperationEnum b : ChequeSumOperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("chequeSumOperation")
  private ChequeSumOperationEnum chequeSumOperation = null;

  @JsonProperty("chequeSumFirstValue")
  private Double chequeSumFirstValue = null;

  @JsonProperty("chequeSumSecondValue")
  private Double chequeSumSecondValue = null;

  @JsonProperty("goodsGroups")
  private List<GoodsGroupViewModel> goodsGroups = null;

  @JsonProperty("filterPositions")
  private Boolean filterPositions = null;

  @JsonProperty("includeCurrentPurchase")
  private Boolean includeCurrentPurchase = null;

  /**
   * Способ агрегации покупок.
   */
  public enum AggregationTypeEnum {
    PURCHASEAMOUNT("PurchaseAmount"),
    
    PURCHASECOUNT("PurchaseCount"),
    
    POSITIONQUANTITY("PositionQuantity"),
    
    PAYMENTAMOUNT("PaymentAmount"),
    
    CASHBACKAMOUNT("CashbackAmount"),
    
    CHARGINGAMOUNT("ChargingAmount"),
    
    CASHBACKCHARGINGAMOUNT("CashbackChargingAmount"),
    
    AVERAGEPURCHASEAMOUNT("AveragePurchaseAmount"),
    
    DISCOUNTAMOUNT("DiscountAmount");

    private String value;

    AggregationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationTypeEnum fromValue(String text) {
      for (AggregationTypeEnum b : AggregationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("aggregationType")
  private AggregationTypeEnum aggregationType = null;

  /**
   * Операция сравнения агрегированного значениия.
   */
  public enum OperationEnum {
    MORE("More"),
    
    LESS("Less"),
    
    EQUALS("Equals"),
    
    BETWEEN("Between"),
    
    MOREOREQUAL("MoreOrEqual"),
    
    LESSOREQUAL("LessOrEqual"),
    
    BETWEENLESSEQUAL("BetweenLessEqual"),
    
    BETWEENMOREEQUAL("BetweenMoreEqual"),
    
    BETWEENEQUAL("BetweenEqual"),
    
    EACH("Each");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("operation")
  private OperationEnum operation = null;

  @JsonProperty("firstValue")
  private Double firstValue = null;

  @JsonProperty("secondValue")
  private Double secondValue = null;

  public PurchaseFilterViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public PurchaseFilterViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PurchaseFilterViewModel isDeletedFilterType(Boolean isDeletedFilterType) {
    this.isDeletedFilterType = isDeletedFilterType;
    return this;
  }

   /**
   * Get isDeletedFilterType
   * @return isDeletedFilterType
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDeletedFilterType() {
    return isDeletedFilterType;
  }

  public void setIsDeletedFilterType(Boolean isDeletedFilterType) {
    this.isDeletedFilterType = isDeletedFilterType;
  }

  public PurchaseFilterViewModel merchants(List<MerchantViewModel> merchants) {
    this.merchants = merchants;
    return this;
  }

  public PurchaseFilterViewModel addMerchantsItem(MerchantViewModel merchantsItem) {
    if (this.merchants == null) {
      this.merchants = new ArrayList<>();
    }
    this.merchants.add(merchantsItem);
    return this;
  }

   /**
   * Список выбранных магазинов.
   * @return merchants
  **/
  @ApiModelProperty(value = "Список выбранных магазинов.")
  public List<MerchantViewModel> getMerchants() {
    return merchants;
  }

  public void setMerchants(List<MerchantViewModel> merchants) {
    this.merchants = merchants;
  }

  public PurchaseFilterViewModel dateFixedPeriod(FixedPurchaseFilterPeriodViewModel dateFixedPeriod) {
    this.dateFixedPeriod = dateFixedPeriod;
    return this;
  }

   /**
   * Фиксированный период даты покупки.
   * @return dateFixedPeriod
  **/
  @ApiModelProperty(value = "Фиксированный период даты покупки.")
  public FixedPurchaseFilterPeriodViewModel getDateFixedPeriod() {
    return dateFixedPeriod;
  }

  public void setDateFixedPeriod(FixedPurchaseFilterPeriodViewModel dateFixedPeriod) {
    this.dateFixedPeriod = dateFixedPeriod;
  }

  public PurchaseFilterViewModel dateFloatingPeriod(FloatingPurchaseFilterPeriodViewModel dateFloatingPeriod) {
    this.dateFloatingPeriod = dateFloatingPeriod;
    return this;
  }

   /**
   * Плавающий период даты покупки.
   * @return dateFloatingPeriod
  **/
  @ApiModelProperty(value = "Плавающий период даты покупки.")
  public FloatingPurchaseFilterPeriodViewModel getDateFloatingPeriod() {
    return dateFloatingPeriod;
  }

  public void setDateFloatingPeriod(FloatingPurchaseFilterPeriodViewModel dateFloatingPeriod) {
    this.dateFloatingPeriod = dateFloatingPeriod;
  }

  public PurchaseFilterViewModel daysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public PurchaseFilterViewModel addDaysOfWeekItem(DaysOfWeekEnum daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

   /**
   * Дни недели покупок.
   * @return daysOfWeek
  **/
  @ApiModelProperty(value = "Дни недели покупок.")
  public List<DaysOfWeekEnum> getDaysOfWeek() {
    return daysOfWeek;
  }

  public void setDaysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }

  public PurchaseFilterViewModel beginTime(HourMinuteModel beginTime) {
    this.beginTime = beginTime;
    return this;
  }

   /**
   * Время начала покупки.
   * @return beginTime
  **/
  @ApiModelProperty(value = "Время начала покупки.")
  public HourMinuteModel getBeginTime() {
    return beginTime;
  }

  public void setBeginTime(HourMinuteModel beginTime) {
    this.beginTime = beginTime;
  }

  public PurchaseFilterViewModel endTime(HourMinuteModel endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Время окончания покупки.
   * @return endTime
  **/
  @ApiModelProperty(value = "Время окончания покупки.")
  public HourMinuteModel getEndTime() {
    return endTime;
  }

  public void setEndTime(HourMinuteModel endTime) {
    this.endTime = endTime;
  }

  public PurchaseFilterViewModel chequeSumOperation(ChequeSumOperationEnum chequeSumOperation) {
    this.chequeSumOperation = chequeSumOperation;
    return this;
  }

   /**
   * Операция сравнения суммы чека.
   * @return chequeSumOperation
  **/
  @ApiModelProperty(value = "Операция сравнения суммы чека.")
  public ChequeSumOperationEnum getChequeSumOperation() {
    return chequeSumOperation;
  }

  public void setChequeSumOperation(ChequeSumOperationEnum chequeSumOperation) {
    this.chequeSumOperation = chequeSumOperation;
  }

  public PurchaseFilterViewModel chequeSumFirstValue(Double chequeSumFirstValue) {
    this.chequeSumFirstValue = chequeSumFirstValue;
    return this;
  }

   /**
   * Первое значение суммы чека.
   * @return chequeSumFirstValue
  **/
  @ApiModelProperty(value = "Первое значение суммы чека.")
  public Double getChequeSumFirstValue() {
    return chequeSumFirstValue;
  }

  public void setChequeSumFirstValue(Double chequeSumFirstValue) {
    this.chequeSumFirstValue = chequeSumFirstValue;
  }

  public PurchaseFilterViewModel chequeSumSecondValue(Double chequeSumSecondValue) {
    this.chequeSumSecondValue = chequeSumSecondValue;
    return this;
  }

   /**
   * Второе значение суммы чека.
   * @return chequeSumSecondValue
  **/
  @ApiModelProperty(value = "Второе значение суммы чека.")
  public Double getChequeSumSecondValue() {
    return chequeSumSecondValue;
  }

  public void setChequeSumSecondValue(Double chequeSumSecondValue) {
    this.chequeSumSecondValue = chequeSumSecondValue;
  }

  public PurchaseFilterViewModel goodsGroups(List<GoodsGroupViewModel> goodsGroups) {
    this.goodsGroups = goodsGroups;
    return this;
  }

  public PurchaseFilterViewModel addGoodsGroupsItem(GoodsGroupViewModel goodsGroupsItem) {
    if (this.goodsGroups == null) {
      this.goodsGroups = new ArrayList<>();
    }
    this.goodsGroups.add(goodsGroupsItem);
    return this;
  }

   /**
   * Товары, хотябы один из которых должены присутствовать в чеке.
   * @return goodsGroups
  **/
  @ApiModelProperty(value = "Товары, хотябы один из которых должены присутствовать в чеке.")
  public List<GoodsGroupViewModel> getGoodsGroups() {
    return goodsGroups;
  }

  public void setGoodsGroups(List<GoodsGroupViewModel> goodsGroups) {
    this.goodsGroups = goodsGroups;
  }

  public PurchaseFilterViewModel filterPositions(Boolean filterPositions) {
    this.filterPositions = filterPositions;
    return this;
  }

   /**
   * Фильтровать позиции в соответсвии с выбранными товарами.
   * @return filterPositions
  **/
  @ApiModelProperty(value = "Фильтровать позиции в соответсвии с выбранными товарами.")
  public Boolean isFilterPositions() {
    return filterPositions;
  }

  public void setFilterPositions(Boolean filterPositions) {
    this.filterPositions = filterPositions;
  }

  public PurchaseFilterViewModel includeCurrentPurchase(Boolean includeCurrentPurchase) {
    this.includeCurrentPurchase = includeCurrentPurchase;
    return this;
  }

   /**
   * Включить текущую покупку в расчет, если она удовлетворяет условиям.
   * @return includeCurrentPurchase
  **/
  @ApiModelProperty(value = "Включить текущую покупку в расчет, если она удовлетворяет условиям.")
  public Boolean isIncludeCurrentPurchase() {
    return includeCurrentPurchase;
  }

  public void setIncludeCurrentPurchase(Boolean includeCurrentPurchase) {
    this.includeCurrentPurchase = includeCurrentPurchase;
  }

  public PurchaseFilterViewModel aggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

   /**
   * Способ агрегации покупок.
   * @return aggregationType
  **/
  @ApiModelProperty(value = "Способ агрегации покупок.")
  public AggregationTypeEnum getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
  }

  public PurchaseFilterViewModel operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Операция сравнения агрегированного значениия.
   * @return operation
  **/
  @ApiModelProperty(value = "Операция сравнения агрегированного значениия.")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public PurchaseFilterViewModel firstValue(Double firstValue) {
    this.firstValue = firstValue;
    return this;
  }

   /**
   * Первое значение для сравнения.
   * @return firstValue
  **/
  @ApiModelProperty(value = "Первое значение для сравнения.")
  public Double getFirstValue() {
    return firstValue;
  }

  public void setFirstValue(Double firstValue) {
    this.firstValue = firstValue;
  }

  public PurchaseFilterViewModel secondValue(Double secondValue) {
    this.secondValue = secondValue;
    return this;
  }

   /**
   * Второе значение для сравнения.
   * @return secondValue
  **/
  @ApiModelProperty(value = "Второе значение для сравнения.")
  public Double getSecondValue() {
    return secondValue;
  }

  public void setSecondValue(Double secondValue) {
    this.secondValue = secondValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseFilterViewModel purchaseFilterViewModel = (PurchaseFilterViewModel) o;
    return Objects.equals(this.id, purchaseFilterViewModel.id) &&
        Objects.equals(this.name, purchaseFilterViewModel.name) &&
        Objects.equals(this.isDeletedFilterType, purchaseFilterViewModel.isDeletedFilterType) &&
        Objects.equals(this.merchants, purchaseFilterViewModel.merchants) &&
        Objects.equals(this.dateFixedPeriod, purchaseFilterViewModel.dateFixedPeriod) &&
        Objects.equals(this.dateFloatingPeriod, purchaseFilterViewModel.dateFloatingPeriod) &&
        Objects.equals(this.daysOfWeek, purchaseFilterViewModel.daysOfWeek) &&
        Objects.equals(this.beginTime, purchaseFilterViewModel.beginTime) &&
        Objects.equals(this.endTime, purchaseFilterViewModel.endTime) &&
        Objects.equals(this.chequeSumOperation, purchaseFilterViewModel.chequeSumOperation) &&
        Objects.equals(this.chequeSumFirstValue, purchaseFilterViewModel.chequeSumFirstValue) &&
        Objects.equals(this.chequeSumSecondValue, purchaseFilterViewModel.chequeSumSecondValue) &&
        Objects.equals(this.goodsGroups, purchaseFilterViewModel.goodsGroups) &&
        Objects.equals(this.filterPositions, purchaseFilterViewModel.filterPositions) &&
        Objects.equals(this.includeCurrentPurchase, purchaseFilterViewModel.includeCurrentPurchase) &&
        Objects.equals(this.aggregationType, purchaseFilterViewModel.aggregationType) &&
        Objects.equals(this.operation, purchaseFilterViewModel.operation) &&
        Objects.equals(this.firstValue, purchaseFilterViewModel.firstValue) &&
        Objects.equals(this.secondValue, purchaseFilterViewModel.secondValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, isDeletedFilterType, merchants, dateFixedPeriod, dateFloatingPeriod, daysOfWeek, beginTime, endTime, chequeSumOperation, chequeSumFirstValue, chequeSumSecondValue, goodsGroups, filterPositions, includeCurrentPurchase, aggregationType, operation, firstValue, secondValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseFilterViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isDeletedFilterType: ").append(toIndentedString(isDeletedFilterType)).append("\n");
    sb.append("    merchants: ").append(toIndentedString(merchants)).append("\n");
    sb.append("    dateFixedPeriod: ").append(toIndentedString(dateFixedPeriod)).append("\n");
    sb.append("    dateFloatingPeriod: ").append(toIndentedString(dateFloatingPeriod)).append("\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    beginTime: ").append(toIndentedString(beginTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    chequeSumOperation: ").append(toIndentedString(chequeSumOperation)).append("\n");
    sb.append("    chequeSumFirstValue: ").append(toIndentedString(chequeSumFirstValue)).append("\n");
    sb.append("    chequeSumSecondValue: ").append(toIndentedString(chequeSumSecondValue)).append("\n");
    sb.append("    goodsGroups: ").append(toIndentedString(goodsGroups)).append("\n");
    sb.append("    filterPositions: ").append(toIndentedString(filterPositions)).append("\n");
    sb.append("    includeCurrentPurchase: ").append(toIndentedString(includeCurrentPurchase)).append("\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    firstValue: ").append(toIndentedString(firstValue)).append("\n");
    sb.append("    secondValue: ").append(toIndentedString(secondValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

