/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package restclient.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;

/**
 * QuestionFilter
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class QuestionFilter {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("logicalName")
  private String logicalName = null;

  /**
   * Gets or Sets stateType
   */
  public enum StateTypeEnum {
    ARCHIVED("Archived"),
    
    NONARCHIVED("NonArchived");

    private String value;

    StateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateTypeEnum fromValue(String text) {
      for (StateTypeEnum b : StateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("stateType")
  private StateTypeEnum stateType = null;

  /**
   * Gets or Sets visibleType
   */
  public enum VisibleTypeEnum {
    VISIBLE("Visible"),
    
    INVISIBLE("Invisible");

    private String value;

    VisibleTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibleTypeEnum fromValue(String text) {
      for (VisibleTypeEnum b : VisibleTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("visibleType")
  private VisibleTypeEnum visibleType = null;

  /**
   * Gets or Sets requiredType
   */
  public enum RequiredTypeEnum {
    REQUIRED("Required"),
    
    NOREQUIRED("NoRequired");

    private String value;

    RequiredTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RequiredTypeEnum fromValue(String text) {
      for (RequiredTypeEnum b : RequiredTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("requiredType")
  private RequiredTypeEnum requiredType = null;

  @JsonProperty("isEmpty")
  private Boolean isEmpty = null;

  public QuestionFilter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public QuestionFilter logicalName(String logicalName) {
    this.logicalName = logicalName;
    return this;
  }

   /**
   * Get logicalName
   * @return logicalName
  **/
  @ApiModelProperty(value = "")
  public String getLogicalName() {
    return logicalName;
  }

  public void setLogicalName(String logicalName) {
    this.logicalName = logicalName;
  }

  public QuestionFilter stateType(StateTypeEnum stateType) {
    this.stateType = stateType;
    return this;
  }

   /**
   * Get stateType
   * @return stateType
  **/
  @ApiModelProperty(value = "")
  public StateTypeEnum getStateType() {
    return stateType;
  }

  public void setStateType(StateTypeEnum stateType) {
    this.stateType = stateType;
  }

  public QuestionFilter visibleType(VisibleTypeEnum visibleType) {
    this.visibleType = visibleType;
    return this;
  }

   /**
   * Get visibleType
   * @return visibleType
  **/
  @ApiModelProperty(value = "")
  public VisibleTypeEnum getVisibleType() {
    return visibleType;
  }

  public void setVisibleType(VisibleTypeEnum visibleType) {
    this.visibleType = visibleType;
  }

  public QuestionFilter requiredType(RequiredTypeEnum requiredType) {
    this.requiredType = requiredType;
    return this;
  }

   /**
   * Get requiredType
   * @return requiredType
  **/
  @ApiModelProperty(value = "")
  public RequiredTypeEnum getRequiredType() {
    return requiredType;
  }

  public void setRequiredType(RequiredTypeEnum requiredType) {
    this.requiredType = requiredType;
  }

   /**
   * Get isEmpty
   * @return isEmpty
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsEmpty() {
    return isEmpty;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionFilter questionFilter = (QuestionFilter) o;
    return Objects.equals(this.name, questionFilter.name) &&
        Objects.equals(this.logicalName, questionFilter.logicalName) &&
        Objects.equals(this.stateType, questionFilter.stateType) &&
        Objects.equals(this.visibleType, questionFilter.visibleType) &&
        Objects.equals(this.requiredType, questionFilter.requiredType) &&
        Objects.equals(this.isEmpty, questionFilter.isEmpty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, logicalName, stateType, visibleType, requiredType, isEmpty);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionFilter {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    logicalName: ").append(toIndentedString(logicalName)).append("\n");
    sb.append("    stateType: ").append(toIndentedString(stateType)).append("\n");
    sb.append("    visibleType: ").append(toIndentedString(visibleType)).append("\n");
    sb.append("    requiredType: ").append(toIndentedString(requiredType)).append("\n");
    sb.append("    isEmpty: ").append(toIndentedString(isEmpty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

