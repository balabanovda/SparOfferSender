/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.AnswerHandlerFieldViewModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель представления обработчика ответа.
 */
@ApiModel(description = "Модель представления обработчика ответа.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class AnswerHandlerViewModel {
  @JsonProperty("isSelected")
  private Boolean isSelected = null;

  /**
   * Идентификатор обработчика.
   */
  public enum HandlerTypeEnum {
    AGELIMIT("AgeLimit"),
    
    PERSONITN("PersonItn");

    private String value;

    HandlerTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HandlerTypeEnum fromValue(String text) {
      for (HandlerTypeEnum b : HandlerTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("handlerType")
  private HandlerTypeEnum handlerType = null;

  @JsonProperty("fields")
  private List<AnswerHandlerFieldViewModel> fields = null;

  public AnswerHandlerViewModel isSelected(Boolean isSelected) {
    this.isSelected = isSelected;
    return this;
  }

   /**
   * Выбран.
   * @return isSelected
  **/
  @ApiModelProperty(value = "Выбран.")
  public Boolean isIsSelected() {
    return isSelected;
  }

  public void setIsSelected(Boolean isSelected) {
    this.isSelected = isSelected;
  }

  public AnswerHandlerViewModel handlerType(HandlerTypeEnum handlerType) {
    this.handlerType = handlerType;
    return this;
  }

   /**
   * Идентификатор обработчика.
   * @return handlerType
  **/
  @ApiModelProperty(value = "Идентификатор обработчика.")
  public HandlerTypeEnum getHandlerType() {
    return handlerType;
  }

  public void setHandlerType(HandlerTypeEnum handlerType) {
    this.handlerType = handlerType;
  }

  public AnswerHandlerViewModel fields(List<AnswerHandlerFieldViewModel> fields) {
    this.fields = fields;
    return this;
  }

  public AnswerHandlerViewModel addFieldsItem(AnswerHandlerFieldViewModel fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Дополнительные поля обработчика.
   * @return fields
  **/
  @ApiModelProperty(value = "Дополнительные поля обработчика.")
  public List<AnswerHandlerFieldViewModel> getFields() {
    return fields;
  }

  public void setFields(List<AnswerHandlerFieldViewModel> fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnswerHandlerViewModel answerHandlerViewModel = (AnswerHandlerViewModel) o;
    return Objects.equals(this.isSelected, answerHandlerViewModel.isSelected) &&
        Objects.equals(this.handlerType, answerHandlerViewModel.handlerType) &&
        Objects.equals(this.fields, answerHandlerViewModel.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSelected, handlerType, fields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnswerHandlerViewModel {\n");
    
    sb.append("    isSelected: ").append(toIndentedString(isSelected)).append("\n");
    sb.append("    handlerType: ").append(toIndentedString(handlerType)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

