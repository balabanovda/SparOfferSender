/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Результат авторизации.
 */
@ApiModel(description = "Результат авторизации.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class AuthResultModel {
  @JsonProperty("token_type")
  private String tokenType = null;

  @JsonProperty("access_token")
  private String accessToken = null;

  @JsonProperty("refresh_token")
  private String refreshToken = null;

  @JsonProperty("expires_in")
  private Integer expiresIn = null;

  public AuthResultModel tokenType(String tokenType) {
    this.tokenType = tokenType;
    return this;
  }

   /**
   * Тип маркера доступа.
   * @return tokenType
  **/
  @ApiModelProperty(value = "Тип маркера доступа.")
  public String getTokenType() {
    return tokenType;
  }

  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }

  public AuthResultModel accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Маркер доступа.
   * @return accessToken
  **/
  @ApiModelProperty(value = "Маркер доступа.")
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }

  public AuthResultModel refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * Маркер обновления доступа.
   * @return refreshToken
  **/
  @ApiModelProperty(value = "Маркер обновления доступа.")
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }

  public AuthResultModel expiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * Срок действия маркера доступа.
   * @return expiresIn
  **/
  @ApiModelProperty(value = "Срок действия маркера доступа.")
  public Integer getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthResultModel authResultModel = (AuthResultModel) o;
    return Objects.equals(this.tokenType, authResultModel.tokenType) &&
        Objects.equals(this.accessToken, authResultModel.accessToken) &&
        Objects.equals(this.refreshToken, authResultModel.refreshToken) &&
        Objects.equals(this.expiresIn, authResultModel.expiresIn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenType, accessToken, refreshToken, expiresIn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthResultModel {\n");
    
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

