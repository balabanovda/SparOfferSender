/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.CardsPackingQueueInfo;
import com.example.demo.restclient.model.PartnerLoyaltyProgramModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * View модель выпуска карт.
 */
@ApiModel(description = "View модель выпуска карт.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CardEmissionViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("number")
  private Integer number = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("count")
  private Integer count = null;

  @JsonProperty("prefix")
  private Integer prefix = null;

  /**
   * Состояние.
   */
  public enum StateEnum {
    NORMAL("Normal");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("templateId")
  private Integer templateId = null;

  @JsonProperty("templateText")
  private String templateText = null;

  /**
   * Тип карты.
   */
  public enum CardTypeEnum {
    GENERAL("General"),
    
    SECONDARY("Secondary"),
    
    VIRTUAL("Virtual");

    private String value;

    CardTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CardTypeEnum fromValue(String text) {
      for (CardTypeEnum b : CardTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("cardType")
  private CardTypeEnum cardType = null;

  @JsonProperty("cardCategoryId")
  private Integer cardCategoryId = null;

  @JsonProperty("packingAllowed")
  private Boolean packingAllowed = null;

  /**
   * Состояние упаковки.
   */
  public enum PackingStateEnum {
    NOTPACKED("NotPacked"),
    
    NOTREQUIRED("NotRequired"),
    
    PACKED("Packed");

    private String value;

    PackingStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PackingStateEnum fromValue(String text) {
      for (PackingStateEnum b : PackingStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("packingState")
  private PackingStateEnum packingState = null;

  @JsonProperty("passwordRequired")
  private Boolean passwordRequired = null;

  @JsonProperty("queueInfo")
  private CardsPackingQueueInfo queueInfo = null;

  @JsonProperty("loyaltyProgram")
  private PartnerLoyaltyProgramModel loyaltyProgram = null;

  public CardEmissionViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id.
   * @return id
  **/
  @ApiModelProperty(value = "Id.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public CardEmissionViewModel number(Integer number) {
    this.number = number;
    return this;
  }

   /**
   * Номер.
   * @return number
  **/
  @ApiModelProperty(value = "Номер.")
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }

  public CardEmissionViewModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Описание.
   * @return description
  **/
  @ApiModelProperty(value = "Описание.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CardEmissionViewModel count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Количество.
   * @return count
  **/
  @ApiModelProperty(value = "Количество.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public CardEmissionViewModel prefix(Integer prefix) {
    this.prefix = prefix;
    return this;
  }

   /**
   * Префикс.
   * @return prefix
  **/
  @ApiModelProperty(value = "Префикс.")
  public Integer getPrefix() {
    return prefix;
  }

  public void setPrefix(Integer prefix) {
    this.prefix = prefix;
  }

  public CardEmissionViewModel state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Состояние.
   * @return state
  **/
  @ApiModelProperty(value = "Состояние.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public CardEmissionViewModel templateId(Integer templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Id шаблона.
   * @return templateId
  **/
  @ApiModelProperty(value = "Id шаблона.")
  public Integer getTemplateId() {
    return templateId;
  }

  public void setTemplateId(Integer templateId) {
    this.templateId = templateId;
  }

  public CardEmissionViewModel templateText(String templateText) {
    this.templateText = templateText;
    return this;
  }

   /**
   * Текст шаблона.
   * @return templateText
  **/
  @ApiModelProperty(value = "Текст шаблона.")
  public String getTemplateText() {
    return templateText;
  }

  public void setTemplateText(String templateText) {
    this.templateText = templateText;
  }

  public CardEmissionViewModel cardType(CardTypeEnum cardType) {
    this.cardType = cardType;
    return this;
  }

   /**
   * Тип карты.
   * @return cardType
  **/
  @ApiModelProperty(value = "Тип карты.")
  public CardTypeEnum getCardType() {
    return cardType;
  }

  public void setCardType(CardTypeEnum cardType) {
    this.cardType = cardType;
  }

  public CardEmissionViewModel cardCategoryId(Integer cardCategoryId) {
    this.cardCategoryId = cardCategoryId;
    return this;
  }

   /**
   * Id категории карт.
   * @return cardCategoryId
  **/
  @ApiModelProperty(value = "Id категории карт.")
  public Integer getCardCategoryId() {
    return cardCategoryId;
  }

  public void setCardCategoryId(Integer cardCategoryId) {
    this.cardCategoryId = cardCategoryId;
  }

  public CardEmissionViewModel packingAllowed(Boolean packingAllowed) {
    this.packingAllowed = packingAllowed;
    return this;
  }

   /**
   * Упаковка.
   * @return packingAllowed
  **/
  @ApiModelProperty(value = "Упаковка.")
  public Boolean isPackingAllowed() {
    return packingAllowed;
  }

  public void setPackingAllowed(Boolean packingAllowed) {
    this.packingAllowed = packingAllowed;
  }

  public CardEmissionViewModel packingState(PackingStateEnum packingState) {
    this.packingState = packingState;
    return this;
  }

   /**
   * Состояние упаковки.
   * @return packingState
  **/
  @ApiModelProperty(value = "Состояние упаковки.")
  public PackingStateEnum getPackingState() {
    return packingState;
  }

  public void setPackingState(PackingStateEnum packingState) {
    this.packingState = packingState;
  }

  public CardEmissionViewModel passwordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
    return this;
  }

   /**
   * Активация без пароля.
   * @return passwordRequired
  **/
  @ApiModelProperty(value = "Активация без пароля.")
  public Boolean isPasswordRequired() {
    return passwordRequired;
  }

  public void setPasswordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
  }

  public CardEmissionViewModel queueInfo(CardsPackingQueueInfo queueInfo) {
    this.queueInfo = queueInfo;
    return this;
  }

   /**
   * Очередь фасовки карт.
   * @return queueInfo
  **/
  @ApiModelProperty(value = "Очередь фасовки карт.")
  public CardsPackingQueueInfo getQueueInfo() {
    return queueInfo;
  }

  public void setQueueInfo(CardsPackingQueueInfo queueInfo) {
    this.queueInfo = queueInfo;
  }

  public CardEmissionViewModel loyaltyProgram(PartnerLoyaltyProgramModel loyaltyProgram) {
    this.loyaltyProgram = loyaltyProgram;
    return this;
  }

   /**
   * Программа лояльности.
   * @return loyaltyProgram
  **/
  @ApiModelProperty(value = "Программа лояльности.")
  public PartnerLoyaltyProgramModel getLoyaltyProgram() {
    return loyaltyProgram;
  }

  public void setLoyaltyProgram(PartnerLoyaltyProgramModel loyaltyProgram) {
    this.loyaltyProgram = loyaltyProgram;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardEmissionViewModel cardEmissionViewModel = (CardEmissionViewModel) o;
    return Objects.equals(this.id, cardEmissionViewModel.id) &&
        Objects.equals(this.number, cardEmissionViewModel.number) &&
        Objects.equals(this.description, cardEmissionViewModel.description) &&
        Objects.equals(this.count, cardEmissionViewModel.count) &&
        Objects.equals(this.prefix, cardEmissionViewModel.prefix) &&
        Objects.equals(this.state, cardEmissionViewModel.state) &&
        Objects.equals(this.templateId, cardEmissionViewModel.templateId) &&
        Objects.equals(this.templateText, cardEmissionViewModel.templateText) &&
        Objects.equals(this.cardType, cardEmissionViewModel.cardType) &&
        Objects.equals(this.cardCategoryId, cardEmissionViewModel.cardCategoryId) &&
        Objects.equals(this.packingAllowed, cardEmissionViewModel.packingAllowed) &&
        Objects.equals(this.packingState, cardEmissionViewModel.packingState) &&
        Objects.equals(this.passwordRequired, cardEmissionViewModel.passwordRequired) &&
        Objects.equals(this.queueInfo, cardEmissionViewModel.queueInfo) &&
        Objects.equals(this.loyaltyProgram, cardEmissionViewModel.loyaltyProgram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, number, description, count, prefix, state, templateId, templateText, cardType, cardCategoryId, packingAllowed, packingState, passwordRequired, queueInfo, loyaltyProgram);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardEmissionViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateText: ").append(toIndentedString(templateText)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardCategoryId: ").append(toIndentedString(cardCategoryId)).append("\n");
    sb.append("    packingAllowed: ").append(toIndentedString(packingAllowed)).append("\n");
    sb.append("    packingState: ").append(toIndentedString(packingState)).append("\n");
    sb.append("    passwordRequired: ").append(toIndentedString(passwordRequired)).append("\n");
    sb.append("    queueInfo: ").append(toIndentedString(queueInfo)).append("\n");
    sb.append("    loyaltyProgram: ").append(toIndentedString(loyaltyProgram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

