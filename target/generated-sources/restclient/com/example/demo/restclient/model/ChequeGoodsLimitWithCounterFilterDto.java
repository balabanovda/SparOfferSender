/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.BaseCounterDto;
import com.example.demo.restclient.model.BaseGoodsFilterDto;
import com.example.demo.restclient.model.BaseGoodsGroupDto;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Фильтр \&quot;Ограничение на товар\&quot;.
 */
@ApiModel(description = "Фильтр \"Ограничение на товар\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class ChequeGoodsLimitWithCounterFilterDto {
  @JsonProperty("goodsGroups")
  private List<BaseGoodsGroupDto> goodsGroups = null;

  @JsonProperty("personalOfferAttributeLogicalName")
  private String personalOfferAttributeLogicalName = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Тип фильтрации.
   */
  public enum TypeEnum {
    ONLYGOODS("OnlyGoods"),
    
    GOODSQUANTITY("GoodsQuantity"),
    
    GOODSAMOUNT("GoodsAmount");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * Оператор сравнения.
   */
  public enum OperatorEnum {
    MORE("More"),
    
    LESS("Less"),
    
    EQUALS("Equals"),
    
    BETWEEN("Between"),
    
    MOREOREQUAL("MoreOrEqual"),
    
    LESSOREQUAL("LessOrEqual"),
    
    BETWEENLESSEQUAL("BetweenLessEqual"),
    
    BETWEENMOREEQUAL("BetweenMoreEqual"),
    
    BETWEENEQUAL("BetweenEqual"),
    
    EACH("Each");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperatorEnum fromValue(String text) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("operator")
  private OperatorEnum operator = null;

  @JsonProperty("value")
  private Double value = null;

  @JsonProperty("counter")
  private BaseCounterDto counter = null;

  public ChequeGoodsLimitWithCounterFilterDto goodsGroups(List<BaseGoodsGroupDto> goodsGroups) {
    this.goodsGroups = goodsGroups;
    return this;
  }

  public ChequeGoodsLimitWithCounterFilterDto addGoodsGroupsItem(BaseGoodsGroupDto goodsGroupsItem) {
    if (this.goodsGroups == null) {
      this.goodsGroups = new ArrayList<>();
    }
    this.goodsGroups.add(goodsGroupsItem);
    return this;
  }

   /**
   * Группы товаров.
   * @return goodsGroups
  **/
  @ApiModelProperty(value = "Группы товаров.")
  public List<BaseGoodsGroupDto> getGoodsGroups() {
    return goodsGroups;
  }

  public void setGoodsGroups(List<BaseGoodsGroupDto> goodsGroups) {
    this.goodsGroups = goodsGroups;
  }

  public ChequeGoodsLimitWithCounterFilterDto personalOfferAttributeLogicalName(String personalOfferAttributeLogicalName) {
    this.personalOfferAttributeLogicalName = personalOfferAttributeLogicalName;
    return this;
  }

   /**
   * Логическое имя атрибута \&quot;Персональное предложение\&quot;.
   * @return personalOfferAttributeLogicalName
  **/
  @ApiModelProperty(value = "Логическое имя атрибута \"Персональное предложение\".")
  public String getPersonalOfferAttributeLogicalName() {
    return personalOfferAttributeLogicalName;
  }

  public void setPersonalOfferAttributeLogicalName(String personalOfferAttributeLogicalName) {
    this.personalOfferAttributeLogicalName = personalOfferAttributeLogicalName;
  }

  public ChequeGoodsLimitWithCounterFilterDto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Имя фильтра.
   * @return name
  **/
  @ApiModelProperty(value = "Имя фильтра.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ChequeGoodsLimitWithCounterFilterDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип фильтрации.
   * @return type
  **/
  @ApiModelProperty(value = "Тип фильтрации.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ChequeGoodsLimitWithCounterFilterDto operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Оператор сравнения.
   * @return operator
  **/
  @ApiModelProperty(value = "Оператор сравнения.")
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }

  public ChequeGoodsLimitWithCounterFilterDto value(Double value) {
    this.value = value;
    return this;
  }

   /**
   * Значение для операции.
   * @return value
  **/
  @ApiModelProperty(value = "Значение для операции.")
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }

  public ChequeGoodsLimitWithCounterFilterDto counter(BaseCounterDto counter) {
    this.counter = counter;
    return this;
  }

   /**
   * Cчетчик.
   * @return counter
  **/
  @ApiModelProperty(value = "Cчетчик.")
  public BaseCounterDto getCounter() {
    return counter;
  }

  public void setCounter(BaseCounterDto counter) {
    this.counter = counter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChequeGoodsLimitWithCounterFilterDto chequeGoodsLimitWithCounterFilterDto = (ChequeGoodsLimitWithCounterFilterDto) o;
    return Objects.equals(this.goodsGroups, chequeGoodsLimitWithCounterFilterDto.goodsGroups) &&
        Objects.equals(this.personalOfferAttributeLogicalName, chequeGoodsLimitWithCounterFilterDto.personalOfferAttributeLogicalName) &&
        Objects.equals(this.name, chequeGoodsLimitWithCounterFilterDto.name) &&
        Objects.equals(this.type, chequeGoodsLimitWithCounterFilterDto.type) &&
        Objects.equals(this.operator, chequeGoodsLimitWithCounterFilterDto.operator) &&
        Objects.equals(this.value, chequeGoodsLimitWithCounterFilterDto.value) &&
        Objects.equals(this.counter, chequeGoodsLimitWithCounterFilterDto.counter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(goodsGroups, personalOfferAttributeLogicalName, name, type, operator, value, counter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChequeGoodsLimitWithCounterFilterDto {\n");
    
    sb.append("    goodsGroups: ").append(toIndentedString(goodsGroups)).append("\n");
    sb.append("    personalOfferAttributeLogicalName: ").append(toIndentedString(personalOfferAttributeLogicalName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

