/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Фильтр для счетчиков.
 */
@ApiModel(description = "Фильтр для счетчиков.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CounterFilter {
  /**
   * Тип события.
   */
  public enum EventTypeEnum {
    ONPURCHASECALCULATE("OnPurchaseCalculate"),
    
    ONATTACHPHONE("OnAttachPhone"),
    
    ONPURCHASECONFIRM("OnPurchaseConfirm"),
    
    ONPURCHASEPAYMENT("OnPurchasePayment"),
    
    ONBALANCEREQUEST("OnBalanceRequest"),
    
    ONCARDISSUE("OnCardIssue"),
    
    ONCARDACTIVATION("OnCardActivation"),
    
    ONSOCIALACTIVITY("OnSocialActivity"),
    
    ONSOCIALGROUPJOIN("OnSocialGroupJoin"),
    
    ONFRIENDINVITE("OnFriendInvite"),
    
    ONSOCIALGROUPLEAVE("OnSocialGroupLeave"),
    
    ONQUESTIONNAIREUPDATE("OnQuestionnaireUpdate"),
    
    ONMOBILEAPPINSTALL("OnMobileAppInstall"),
    
    ONENDPERSONREGISTRATION("OnEndPersonRegistration"),
    
    ONSOCIALNETWORKLINK("OnSocialNetworkLink"),
    
    ONBONUSLIFETIMEEXPIRED("OnBonusLifetimeExpired"),
    
    ONBIRTHDAY("OnBirthday"),
    
    ONPURCHASEREFUND("OnPurchaseRefund"),
    
    ONREFERRALPURCHASE("OnReferralPurchase"),
    
    ONPURCHASECANCEL("OnPurchaseCancel"),
    
    ONREMOVESOCIALACTIVITY("OnRemoveSocialActivity"),
    
    ONPURCHASEDISCOUNT("OnPurchaseDiscount"),
    
    ONSENDPASSWORDTOCHEQUE("OnSendPasswordToCheque"),
    
    ONGOODSSETPROCESS("OnGoodsSetProcess"),
    
    ONATTACHEMAIL("OnAttachEmail"),
    
    ONBONUSLIFETIMEACTIVATION("OnBonusLifetimeActivation"),
    
    ONPURCHASEPAYMENTCALCULATE("OnPurchasePaymentCalculate"),
    
    ONPURCHASEPAYMENTCANCEL("OnPurchasePaymentCancel"),
    
    ONCOUPONPURCHASED("OnCouponPurchased"),
    
    ONCOUPONREFUNDED("OnCouponRefunded"),
    
    ONPURCHASEDEPOSIT("OnPurchaseDeposit"),
    
    ONCARDATTACH("OnCardAttach"),
    
    ONCARDREPLACE("OnCardReplace"),
    
    ONEXTERNALCARDREPLACE("OnExternalCardReplace"),
    
    ONPURCHASEREFUNDCALCULATE("OnPurchaseRefundCalculate"),
    
    ONMANUALCHARGE("OnManualCharge"),
    
    ONMANUALWITHDRAW("OnManualWithdraw");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String text) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("eventType")
  private EventTypeEnum eventType = null;

  @JsonProperty("nameText")
  private String nameText = null;

  /**
   * Тип счетчика.
   */
  public enum CounterTypeEnum {
    ORIGINAL("Original"),
    
    PURCHASECOUNTER("PurchaseCounter"),
    
    MULTIPLICITYCOUNTER("MultiplicityCounter");

    private String value;

    CounterTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CounterTypeEnum fromValue(String text) {
      for (CounterTypeEnum b : CounterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("counterType")
  private CounterTypeEnum counterType = null;

  @JsonProperty("dateFrom")
  private OffsetDateTime dateFrom = null;

  @JsonProperty("dateTo")
  private OffsetDateTime dateTo = null;

  @JsonProperty("partners")
  private List<Integer> partners = null;

  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("count")
  private Integer count = null;

  @JsonProperty("loyaltyProgramIds")
  private List<Integer> loyaltyProgramIds = null;

  public CounterFilter eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Тип события.
   * @return eventType
  **/
  @ApiModelProperty(value = "Тип события.")
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }

  public CounterFilter nameText(String nameText) {
    this.nameText = nameText;
    return this;
  }

   /**
   * Текст, содержащийся в названии счетчика.
   * @return nameText
  **/
  @ApiModelProperty(value = "Текст, содержащийся в названии счетчика.")
  public String getNameText() {
    return nameText;
  }

  public void setNameText(String nameText) {
    this.nameText = nameText;
  }

  public CounterFilter counterType(CounterTypeEnum counterType) {
    this.counterType = counterType;
    return this;
  }

   /**
   * Тип счетчика.
   * @return counterType
  **/
  @ApiModelProperty(value = "Тип счетчика.")
  public CounterTypeEnum getCounterType() {
    return counterType;
  }

  public void setCounterType(CounterTypeEnum counterType) {
    this.counterType = counterType;
  }

  public CounterFilter dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * С какой даты искать.
   * @return dateFrom
  **/
  @ApiModelProperty(value = "С какой даты искать.")
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }

  public CounterFilter dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * По какую дату искать.
   * @return dateTo
  **/
  @ApiModelProperty(value = "По какую дату искать.")
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }

  public CounterFilter partners(List<Integer> partners) {
    this.partners = partners;
    return this;
  }

  public CounterFilter addPartnersItem(Integer partnersItem) {
    if (this.partners == null) {
      this.partners = new ArrayList<>();
    }
    this.partners.add(partnersItem);
    return this;
  }

   /**
   * Список партнеров, по которым будут отфильтрованы счетчики.
   * @return partners
  **/
  @ApiModelProperty(value = "Список партнеров, по которым будут отфильтрованы счетчики.")
  public List<Integer> getPartners() {
    return partners;
  }

  public void setPartners(List<Integer> partners) {
    this.partners = partners;
  }

  public CounterFilter from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * Начало выборки.
   * @return from
  **/
  @ApiModelProperty(value = "Начало выборки.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public CounterFilter count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Количество.
   * @return count
  **/
  @ApiModelProperty(value = "Количество.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public CounterFilter loyaltyProgramIds(List<Integer> loyaltyProgramIds) {
    this.loyaltyProgramIds = loyaltyProgramIds;
    return this;
  }

  public CounterFilter addLoyaltyProgramIdsItem(Integer loyaltyProgramIdsItem) {
    if (this.loyaltyProgramIds == null) {
      this.loyaltyProgramIds = new ArrayList<>();
    }
    this.loyaltyProgramIds.add(loyaltyProgramIdsItem);
    return this;
  }

   /**
   * Список id программ лояльности, для фильтрации счетчиков.
   * @return loyaltyProgramIds
  **/
  @ApiModelProperty(value = "Список id программ лояльности, для фильтрации счетчиков.")
  public List<Integer> getLoyaltyProgramIds() {
    return loyaltyProgramIds;
  }

  public void setLoyaltyProgramIds(List<Integer> loyaltyProgramIds) {
    this.loyaltyProgramIds = loyaltyProgramIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterFilter counterFilter = (CounterFilter) o;
    return Objects.equals(this.eventType, counterFilter.eventType) &&
        Objects.equals(this.nameText, counterFilter.nameText) &&
        Objects.equals(this.counterType, counterFilter.counterType) &&
        Objects.equals(this.dateFrom, counterFilter.dateFrom) &&
        Objects.equals(this.dateTo, counterFilter.dateTo) &&
        Objects.equals(this.partners, counterFilter.partners) &&
        Objects.equals(this.from, counterFilter.from) &&
        Objects.equals(this.count, counterFilter.count) &&
        Objects.equals(this.loyaltyProgramIds, counterFilter.loyaltyProgramIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, nameText, counterType, dateFrom, dateTo, partners, from, count, loyaltyProgramIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterFilter {\n");
    
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    nameText: ").append(toIndentedString(nameText)).append("\n");
    sb.append("    counterType: ").append(toIndentedString(counterType)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    partners: ").append(toIndentedString(partners)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    loyaltyProgramIds: ").append(toIndentedString(loyaltyProgramIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

