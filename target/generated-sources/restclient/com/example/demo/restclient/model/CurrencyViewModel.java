/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.CurrencyBaseModel;
import com.example.demo.restclient.model.NameCaseModel;
import com.example.demo.restclient.model.PartnerViewModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель представления для валюты.
 */
@ApiModel(description = "Модель представления для валюты.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class CurrencyViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Тип валюты.
   */
  public enum TypeEnum {
    VIRTUAL("Virtual"),
    
    CASH("Cash");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("externalId")
  private String externalId = null;

  @JsonProperty("divisibility")
  private Double divisibility = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("nameCases")
  private NameCaseModel nameCases = null;

  @JsonProperty("isDeleted")
  private Boolean isDeleted = null;

  @JsonProperty("partners")
  private List<PartnerViewModel> partners = null;

  /**
   * Режим доступа к валюте.
   */
  public enum AccessModeEnum {
    VIEW("View"),
    
    EDIT("Edit");

    private String value;

    AccessModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AccessModeEnum fromValue(String text) {
      for (AccessModeEnum b : AccessModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("accessMode")
  private AccessModeEnum accessMode = null;

  public CurrencyViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор валюты.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор валюты.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public CurrencyViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Название.
   * @return name
  **/
  @ApiModelProperty(value = "Название.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CurrencyViewModel type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип валюты.
   * @return type
  **/
  @ApiModelProperty(value = "Тип валюты.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CurrencyViewModel externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Внешний идентификатор.
   * @return externalId
  **/
  @ApiModelProperty(value = "Внешний идентификатор.")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public CurrencyViewModel divisibility(Double divisibility) {
    this.divisibility = divisibility;
    return this;
  }

   /**
   * Значение делимости валюты.
   * @return divisibility
  **/
  @ApiModelProperty(value = "Значение делимости валюты.")
  public Double getDivisibility() {
    return divisibility;
  }

  public void setDivisibility(Double divisibility) {
    this.divisibility = divisibility;
  }

  public CurrencyViewModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Описание.
   * @return description
  **/
  @ApiModelProperty(value = "Описание.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CurrencyViewModel nameCases(NameCaseModel nameCases) {
    this.nameCases = nameCases;
    return this;
  }

   /**
   * Список вариантов написания названия.
   * @return nameCases
  **/
  @ApiModelProperty(value = "Список вариантов написания названия.")
  public NameCaseModel getNameCases() {
    return nameCases;
  }

  public void setNameCases(NameCaseModel nameCases) {
    this.nameCases = nameCases;
  }

  public CurrencyViewModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Удалена валюта или нет.
   * @return isDeleted
  **/
  @ApiModelProperty(value = "Удалена валюта или нет.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public CurrencyViewModel partners(List<PartnerViewModel> partners) {
    this.partners = partners;
    return this;
  }

  public CurrencyViewModel addPartnersItem(PartnerViewModel partnersItem) {
    if (this.partners == null) {
      this.partners = new ArrayList<>();
    }
    this.partners.add(partnersItem);
    return this;
  }

   /**
   * Список партнеров.
   * @return partners
  **/
  @ApiModelProperty(value = "Список партнеров.")
  public List<PartnerViewModel> getPartners() {
    return partners;
  }

  public void setPartners(List<PartnerViewModel> partners) {
    this.partners = partners;
  }

  public CurrencyViewModel accessMode(AccessModeEnum accessMode) {
    this.accessMode = accessMode;
    return this;
  }

   /**
   * Режим доступа к валюте.
   * @return accessMode
  **/
  @ApiModelProperty(value = "Режим доступа к валюте.")
  public AccessModeEnum getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessModeEnum accessMode) {
    this.accessMode = accessMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyViewModel currencyViewModel = (CurrencyViewModel) o;
    return Objects.equals(this.id, currencyViewModel.id) &&
        Objects.equals(this.name, currencyViewModel.name) &&
        Objects.equals(this.type, currencyViewModel.type) &&
        Objects.equals(this.externalId, currencyViewModel.externalId) &&
        Objects.equals(this.divisibility, currencyViewModel.divisibility) &&
        Objects.equals(this.description, currencyViewModel.description) &&
        Objects.equals(this.nameCases, currencyViewModel.nameCases) &&
        Objects.equals(this.isDeleted, currencyViewModel.isDeleted) &&
        Objects.equals(this.partners, currencyViewModel.partners) &&
        Objects.equals(this.accessMode, currencyViewModel.accessMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, externalId, divisibility, description, nameCases, isDeleted, partners, accessMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    divisibility: ").append(toIndentedString(divisibility)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    nameCases: ").append(toIndentedString(nameCases)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    partners: ").append(toIndentedString(partners)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

