/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.DeviceEmulationResultStateViewModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Модель итогового состояния.
 */
@ApiModel(description = "Модель итогового состояния.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class DeviceEmulationCalculateResultStateViewModel {
  /**
   * Код ошибки.
   */
  public enum ErrorCodeEnum {
    OK("Ok"),
    
    SYSTEMERROR("SystemError"),
    
    VERSIONERROR("VersionError"),
    
    PARSEERROR("ParseError"),
    
    FORMATEXCEPTION("FormatException"),
    
    REQUEREFIELDEXCEPTION("RequereFieldException"),
    
    SIGNATUREERROR("SignatureError"),
    
    SIGNATURENOTFOUND("SignatureNotFound"),
    
    CERTIFICATEERROR("CertificateError"),
    
    CARDNOTFOUND("CardNotFound"),
    
    DEVICENOTFOUND("DeviceNotFound"),
    
    LARGEPAYMENTAMOUNT("LargePaymentAmount"),
    
    NOTENOUGHMONEY("NotEnoughMoney"),
    
    CARDBLOCKED("CardBlocked"),
    
    DEVICEBLOCKED("DeviceBlocked"),
    
    NOTUNIQUEOPERATIONID("NotUniqueOperationID"),
    
    OPERATIONNOTFOUND("OperationNotFound"),
    
    OPERATIONISCONFIRMED("OperationIsConfirmed"),
    
    OPERATIONISCANCELED("OperationIsCanceled"),
    
    WRONGPIN("WrongPin"),
    
    CASHIERNOTFOUND("CashierNotFound"),
    
    CARDHOLDERNOTFOUND("CardHolderNotFound"),
    
    CARDNOTACTIVATED("CardNotActivated"),
    
    DISCOUNTEXCEPTION("DiscountException"),
    
    PURCHASENOTFOUND("PurchaseNotFound"),
    
    DIFFERENTCHEQUE("DifferentCheque"),
    
    INCORRECTOPERATIONORDER("IncorrectOperationOrder"),
    
    CARDEXTRAPAYMENT("CardExtraPayment"),
    
    CONFIRMEDPURCHASEOPERATION("ConfirmedPurchaseOperation"),
    
    PURCHASEEXTRAPAYMENT("PurchaseExtraPayment"),
    
    LIMITGAINED("LimitGained"),
    
    PAYMENTEXCEPTION("PaymentException"),
    
    DIFFERENTPURCHASE("DifferentPurchase"),
    
    COUPONSEXCEPTION("CouponsException"),
    
    BUSINESSERROR("BusinessError"),
    
    APPLICATIONDEVICEGRANT("ApplicationDeviceGrant"),
    
    NOTUNIQUEPURCHASEID("NotUniquePurchaseID"),
    
    DIVISIBILITYERROR("DivisibilityError"),
    
    DIFFERENTLEGALS("DifferentLegals"),
    
    UNSPECIFIEDLOYALTYPROGRAM("UnspecifiedLoyaltyProgram"),
    
    CREATED("Created"),
    
    PAYTYPEISNOTEXIST("PayTypeIsNotExist"),
    
    PAYTYPEISARCHIVED("PayTypeIsArchived");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ErrorCodeEnum fromValue(String text) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("errorCode")
  private ErrorCodeEnum errorCode = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("cashierMessage")
  private String cashierMessage = null;

  @JsonProperty("availableAmount")
  private Double availableAmount = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("chequeMessage")
  private String chequeMessage = null;

  public DeviceEmulationCalculateResultStateViewModel errorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Код ошибки.
   * @return errorCode
  **/
  @ApiModelProperty(value = "Код ошибки.")
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }

  public DeviceEmulationCalculateResultStateViewModel message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Сообщение.
   * @return message
  **/
  @ApiModelProperty(value = "Сообщение.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public DeviceEmulationCalculateResultStateViewModel cashierMessage(String cashierMessage) {
    this.cashierMessage = cashierMessage;
    return this;
  }

   /**
   * Сообщение для кассира.
   * @return cashierMessage
  **/
  @ApiModelProperty(value = "Сообщение для кассира.")
  public String getCashierMessage() {
    return cashierMessage;
  }

  public void setCashierMessage(String cashierMessage) {
    this.cashierMessage = cashierMessage;
  }

  public DeviceEmulationCalculateResultStateViewModel availableAmount(Double availableAmount) {
    this.availableAmount = availableAmount;
    return this;
  }

   /**
   * Сумма доступных для оплаты средств.
   * @return availableAmount
  **/
  @ApiModelProperty(value = "Сумма доступных для оплаты средств.")
  public Double getAvailableAmount() {
    return availableAmount;
  }

  public void setAvailableAmount(Double availableAmount) {
    this.availableAmount = availableAmount;
  }

  public DeviceEmulationCalculateResultStateViewModel currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Валюта.
   * @return currency
  **/
  @ApiModelProperty(value = "Валюта.")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public DeviceEmulationCalculateResultStateViewModel chequeMessage(String chequeMessage) {
    this.chequeMessage = chequeMessage;
    return this;
  }

   /**
   * Сообщение на чек.
   * @return chequeMessage
  **/
  @ApiModelProperty(value = "Сообщение на чек.")
  public String getChequeMessage() {
    return chequeMessage;
  }

  public void setChequeMessage(String chequeMessage) {
    this.chequeMessage = chequeMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceEmulationCalculateResultStateViewModel deviceEmulationCalculateResultStateViewModel = (DeviceEmulationCalculateResultStateViewModel) o;
    return Objects.equals(this.errorCode, deviceEmulationCalculateResultStateViewModel.errorCode) &&
        Objects.equals(this.message, deviceEmulationCalculateResultStateViewModel.message) &&
        Objects.equals(this.cashierMessage, deviceEmulationCalculateResultStateViewModel.cashierMessage) &&
        Objects.equals(this.availableAmount, deviceEmulationCalculateResultStateViewModel.availableAmount) &&
        Objects.equals(this.currency, deviceEmulationCalculateResultStateViewModel.currency) &&
        Objects.equals(this.chequeMessage, deviceEmulationCalculateResultStateViewModel.chequeMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, message, cashierMessage, availableAmount, currency, chequeMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceEmulationCalculateResultStateViewModel {\n");
    
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    cashierMessage: ").append(toIndentedString(cashierMessage)).append("\n");
    sb.append("    availableAmount: ").append(toIndentedString(availableAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    chequeMessage: ").append(toIndentedString(chequeMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

