/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Представление для {Loymax.Entities.DeviceType}.
 */
@ApiModel(description = "Представление для {Loymax.Entities.DeviceType}.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class DeviceTypeViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Версия протокола.
   */
  public enum ProtocolVersionEnum {
    VERSION20("Version20"),
    
    VERSION22("Version22"),
    
    VERSION30("Version30"),
    
    VERSION32("Version32");

    private String value;

    ProtocolVersionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProtocolVersionEnum fromValue(String text) {
      for (ProtocolVersionEnum b : ProtocolVersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("protocolVersion")
  private ProtocolVersionEnum protocolVersion = null;

  @JsonProperty("isArchived")
  private Boolean isArchived = null;

  /**
   * Тип кодировки.
   */
  public enum EncodingTypeEnum {
    ASCII("ASCII"),
    
    CP866("Cp866"),
    
    KOI8R("Koi8r"),
    
    WINDOWS1251("Windows1251"),
    
    UNICODE("Unicode"),
    
    UTF7("UTF7"),
    
    UTF8("UTF8"),
    
    UTF32("UTF32");

    private String value;

    EncodingTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EncodingTypeEnum fromValue(String text) {
      for (EncodingTypeEnum b : EncodingTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("encodingType")
  private EncodingTypeEnum encodingType = null;

  public DeviceTypeViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Индификатор сущности.
   * @return id
  **/
  @ApiModelProperty(value = "Индификатор сущности.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public DeviceTypeViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Название.
   * @return name
  **/
  @ApiModelProperty(value = "Название.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DeviceTypeViewModel protocolVersion(ProtocolVersionEnum protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

   /**
   * Версия протокола.
   * @return protocolVersion
  **/
  @ApiModelProperty(value = "Версия протокола.")
  public ProtocolVersionEnum getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(ProtocolVersionEnum protocolVersion) {
    this.protocolVersion = protocolVersion;
  }

  public DeviceTypeViewModel isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Архивирован.
   * @return isArchived
  **/
  @ApiModelProperty(value = "Архивирован.")
  public Boolean isIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }

  public DeviceTypeViewModel encodingType(EncodingTypeEnum encodingType) {
    this.encodingType = encodingType;
    return this;
  }

   /**
   * Тип кодировки.
   * @return encodingType
  **/
  @ApiModelProperty(value = "Тип кодировки.")
  public EncodingTypeEnum getEncodingType() {
    return encodingType;
  }

  public void setEncodingType(EncodingTypeEnum encodingType) {
    this.encodingType = encodingType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceTypeViewModel deviceTypeViewModel = (DeviceTypeViewModel) o;
    return Objects.equals(this.id, deviceTypeViewModel.id) &&
        Objects.equals(this.name, deviceTypeViewModel.name) &&
        Objects.equals(this.protocolVersion, deviceTypeViewModel.protocolVersion) &&
        Objects.equals(this.isArchived, deviceTypeViewModel.isArchived) &&
        Objects.equals(this.encodingType, deviceTypeViewModel.encodingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, protocolVersion, isArchived, encodingType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceTypeViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    encodingType: ").append(toIndentedString(encodingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

