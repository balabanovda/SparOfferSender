/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.CurrencyBaseModel;
import com.example.demo.restclient.model.DeviceBriefViewModel;
import com.example.demo.restclient.model.DeviceTypeViewModel;
import com.example.demo.restclient.model.LegalViewModel;
import com.example.demo.restclient.model.MerchantInfoShortViewModel;
import com.example.demo.restclient.model.UrlAuthViewModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Модель представления для сущности девайса (кассы).
 */
@ApiModel(description = "Модель представления для сущности девайса (кассы).")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class DeviceViewModel {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("isDeleted")
  private Boolean isDeleted = null;

  @JsonProperty("partnerId")
  private Integer partnerId = null;

  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("logicalId")
  private String logicalId = null;

  @JsonProperty("merchant")
  private MerchantInfoShortViewModel merchant = null;

  @JsonProperty("legal")
  private LegalViewModel legal = null;

  @JsonProperty("type")
  private DeviceTypeViewModel type = null;

  @JsonProperty("accountGroupId")
  private Integer accountGroupId = null;

  /**
   * Тип аутентификации.
   */
  public enum OperationAuthTypeEnum {
    NONE("None"),
    
    LASTFOURNUMBERS("LastFourNumbers"),
    
    PINCODE("PINCode");

    private String value;

    OperationAuthTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationAuthTypeEnum fromValue(String text) {
      for (OperationAuthTypeEnum b : OperationAuthTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("operationAuthType")
  private OperationAuthTypeEnum operationAuthType = null;

  /**
   * Тип возврата.
   */
  public enum RefundTypeEnum {
    NORMAL("Normal"),
    
    BONUSFIRST("BonusFirst");

    private String value;

    RefundTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RefundTypeEnum fromValue(String text) {
      for (RefundTypeEnum b : RefundTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("refundType")
  private RefundTypeEnum refundType = null;

  @JsonProperty("isPerUnit")
  private Boolean isPerUnit = null;

  @JsonProperty("urlAuth")
  private UrlAuthViewModel urlAuth = null;

  @JsonProperty("currency")
  private CurrencyBaseModel currency = null;

  @JsonProperty("certificate")
  private String certificate = null;

  /**
   * ЭЦП.
   */
  public enum RequestAuthTypeEnum {
    NONE("None"),
    
    SIGNATURE("Signature");

    private String value;

    RequestAuthTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RequestAuthTypeEnum fromValue(String text) {
      for (RequestAuthTypeEnum b : RequestAuthTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("requestAuthType")
  private RequestAuthTypeEnum requestAuthType = null;

  public DeviceViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Имя устройства.
   * @return name
  **/
  @ApiModelProperty(value = "Имя устройства.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DeviceViewModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Удалено.
   * @return isDeleted
  **/
  @ApiModelProperty(value = "Удалено.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public DeviceViewModel partnerId(Integer partnerId) {
    this.partnerId = partnerId;
    return this;
  }

   /**
   * Идентификатор партнера.
   * @return partnerId
  **/
  @ApiModelProperty(value = "Идентификатор партнера.")
  public Integer getPartnerId() {
    return partnerId;
  }

  public void setPartnerId(Integer partnerId) {
    this.partnerId = partnerId;
  }

  public DeviceViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id девайса.
   * @return id
  **/
  @ApiModelProperty(value = "Id девайса.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public DeviceViewModel logicalId(String logicalId) {
    this.logicalId = logicalId;
    return this;
  }

   /**
   * Логическое имя устройства.
   * @return logicalId
  **/
  @ApiModelProperty(value = "Логическое имя устройства.")
  public String getLogicalId() {
    return logicalId;
  }

  public void setLogicalId(String logicalId) {
    this.logicalId = logicalId;
  }

  public DeviceViewModel merchant(MerchantInfoShortViewModel merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Магазин.
   * @return merchant
  **/
  @ApiModelProperty(value = "Магазин.")
  public MerchantInfoShortViewModel getMerchant() {
    return merchant;
  }

  public void setMerchant(MerchantInfoShortViewModel merchant) {
    this.merchant = merchant;
  }

  public DeviceViewModel legal(LegalViewModel legal) {
    this.legal = legal;
    return this;
  }

   /**
   * Юридическое лицо.
   * @return legal
  **/
  @ApiModelProperty(value = "Юридическое лицо.")
  public LegalViewModel getLegal() {
    return legal;
  }

  public void setLegal(LegalViewModel legal) {
    this.legal = legal;
  }

  public DeviceViewModel type(DeviceTypeViewModel type) {
    this.type = type;
    return this;
  }

   /**
   * Тип.
   * @return type
  **/
  @ApiModelProperty(value = "Тип.")
  public DeviceTypeViewModel getType() {
    return type;
  }

  public void setType(DeviceTypeViewModel type) {
    this.type = type;
  }

  public DeviceViewModel accountGroupId(Integer accountGroupId) {
    this.accountGroupId = accountGroupId;
    return this;
  }

   /**
   * Идентификатор группы счетов.
   * @return accountGroupId
  **/
  @ApiModelProperty(value = "Идентификатор группы счетов.")
  public Integer getAccountGroupId() {
    return accountGroupId;
  }

  public void setAccountGroupId(Integer accountGroupId) {
    this.accountGroupId = accountGroupId;
  }

  public DeviceViewModel operationAuthType(OperationAuthTypeEnum operationAuthType) {
    this.operationAuthType = operationAuthType;
    return this;
  }

   /**
   * Тип аутентификации.
   * @return operationAuthType
  **/
  @ApiModelProperty(value = "Тип аутентификации.")
  public OperationAuthTypeEnum getOperationAuthType() {
    return operationAuthType;
  }

  public void setOperationAuthType(OperationAuthTypeEnum operationAuthType) {
    this.operationAuthType = operationAuthType;
  }

  public DeviceViewModel refundType(RefundTypeEnum refundType) {
    this.refundType = refundType;
    return this;
  }

   /**
   * Тип возврата.
   * @return refundType
  **/
  @ApiModelProperty(value = "Тип возврата.")
  public RefundTypeEnum getRefundType() {
    return refundType;
  }

  public void setRefundType(RefundTypeEnum refundType) {
    this.refundType = refundType;
  }

  public DeviceViewModel isPerUnit(Boolean isPerUnit) {
    this.isPerUnit = isPerUnit;
    return this;
  }

   /**
   * Признак расчета на каждую единицу в позиции.
   * @return isPerUnit
  **/
  @ApiModelProperty(value = "Признак расчета на каждую единицу в позиции.")
  public Boolean isIsPerUnit() {
    return isPerUnit;
  }

  public void setIsPerUnit(Boolean isPerUnit) {
    this.isPerUnit = isPerUnit;
  }

  public DeviceViewModel urlAuth(UrlAuthViewModel urlAuth) {
    this.urlAuth = urlAuth;
    return this;
  }

   /**
   * URL-адрес с авторизацией.
   * @return urlAuth
  **/
  @ApiModelProperty(value = "URL-адрес с авторизацией.")
  public UrlAuthViewModel getUrlAuth() {
    return urlAuth;
  }

  public void setUrlAuth(UrlAuthViewModel urlAuth) {
    this.urlAuth = urlAuth;
  }

  public DeviceViewModel currency(CurrencyBaseModel currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Валюта кассы.
   * @return currency
  **/
  @ApiModelProperty(value = "Валюта кассы.")
  public CurrencyBaseModel getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyBaseModel currency) {
    this.currency = currency;
  }

  public DeviceViewModel certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Сертификат с публичным ключём кассы.
   * @return certificate
  **/
  @ApiModelProperty(value = "Сертификат с публичным ключём кассы.")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public DeviceViewModel requestAuthType(RequestAuthTypeEnum requestAuthType) {
    this.requestAuthType = requestAuthType;
    return this;
  }

   /**
   * ЭЦП.
   * @return requestAuthType
  **/
  @ApiModelProperty(value = "ЭЦП.")
  public RequestAuthTypeEnum getRequestAuthType() {
    return requestAuthType;
  }

  public void setRequestAuthType(RequestAuthTypeEnum requestAuthType) {
    this.requestAuthType = requestAuthType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceViewModel deviceViewModel = (DeviceViewModel) o;
    return Objects.equals(this.name, deviceViewModel.name) &&
        Objects.equals(this.isDeleted, deviceViewModel.isDeleted) &&
        Objects.equals(this.partnerId, deviceViewModel.partnerId) &&
        Objects.equals(this.id, deviceViewModel.id) &&
        Objects.equals(this.logicalId, deviceViewModel.logicalId) &&
        Objects.equals(this.merchant, deviceViewModel.merchant) &&
        Objects.equals(this.legal, deviceViewModel.legal) &&
        Objects.equals(this.type, deviceViewModel.type) &&
        Objects.equals(this.accountGroupId, deviceViewModel.accountGroupId) &&
        Objects.equals(this.operationAuthType, deviceViewModel.operationAuthType) &&
        Objects.equals(this.refundType, deviceViewModel.refundType) &&
        Objects.equals(this.isPerUnit, deviceViewModel.isPerUnit) &&
        Objects.equals(this.urlAuth, deviceViewModel.urlAuth) &&
        Objects.equals(this.currency, deviceViewModel.currency) &&
        Objects.equals(this.certificate, deviceViewModel.certificate) &&
        Objects.equals(this.requestAuthType, deviceViewModel.requestAuthType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, isDeleted, partnerId, id, logicalId, merchant, legal, type, accountGroupId, operationAuthType, refundType, isPerUnit, urlAuth, currency, certificate, requestAuthType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceViewModel {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logicalId: ").append(toIndentedString(logicalId)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    legal: ").append(toIndentedString(legal)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    accountGroupId: ").append(toIndentedString(accountGroupId)).append("\n");
    sb.append("    operationAuthType: ").append(toIndentedString(operationAuthType)).append("\n");
    sb.append("    refundType: ").append(toIndentedString(refundType)).append("\n");
    sb.append("    isPerUnit: ").append(toIndentedString(isPerUnit)).append("\n");
    sb.append("    urlAuth: ").append(toIndentedString(urlAuth)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    requestAuthType: ").append(toIndentedString(requestAuthType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

