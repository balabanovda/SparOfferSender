/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.BusinessActivityViewModel;
import com.example.demo.restclient.model.CalculationOfferModel;
import com.example.demo.restclient.model.ChequePositionViewModel;
import com.example.demo.restclient.model.EventCalculationModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Фильтр для списка счетов кассы.
 */
@ApiModel(description = "Фильтр для списка счетов кассы.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class EventCalculationModel {
  @JsonProperty("id")
  private Long id = null;

  /**
   * Тип расчёта.
   */
  public enum CalculationTypeEnum {
    DIRECTDISCOUNT("DirectDiscount"),
    
    CASHBACKDISCOUNT("CashbackDiscount"),
    
    LIMITPAYMENT("LimitPayment"),
    
    CONFIRMPURCHASE("ConfirmPurchase"),
    
    CANCELPURCHASE("CancelPurchase"),
    
    PAYMENT("Payment"),
    
    PURCHASEREFUND("PurchaseRefund"),
    
    BALANCE("Balance"),
    
    ISSUECARD("IssueCard"),
    
    PERSONACTIVITY("PersonActivity"),
    
    SENDPASSWORDTOCHEQUE("SendPasswordToCheque"),
    
    PRECALCULATECASHBACK("PreCalculateCashback");

    private String value;

    CalculationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CalculationTypeEnum fromValue(String text) {
      for (CalculationTypeEnum b : CalculationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("calculationType")
  private CalculationTypeEnum calculationType = null;

  /**
   * Тип события.
   */
  public enum OfferEventTypeEnum {
    ONPURCHASECALCULATE("OnPurchaseCalculate"),
    
    ONATTACHPHONE("OnAttachPhone"),
    
    ONPURCHASECONFIRM("OnPurchaseConfirm"),
    
    ONPURCHASEPAYMENT("OnPurchasePayment"),
    
    ONBALANCEREQUEST("OnBalanceRequest"),
    
    ONCARDISSUE("OnCardIssue"),
    
    ONCARDACTIVATION("OnCardActivation"),
    
    ONSOCIALACTIVITY("OnSocialActivity"),
    
    ONSOCIALGROUPJOIN("OnSocialGroupJoin"),
    
    ONFRIENDINVITE("OnFriendInvite"),
    
    ONSOCIALGROUPLEAVE("OnSocialGroupLeave"),
    
    ONQUESTIONNAIREUPDATE("OnQuestionnaireUpdate"),
    
    ONMOBILEAPPINSTALL("OnMobileAppInstall"),
    
    ONENDPERSONREGISTRATION("OnEndPersonRegistration"),
    
    ONSOCIALNETWORKLINK("OnSocialNetworkLink"),
    
    ONBONUSLIFETIMEEXPIRED("OnBonusLifetimeExpired"),
    
    ONBIRTHDAY("OnBirthday"),
    
    ONPURCHASEREFUND("OnPurchaseRefund"),
    
    ONREFERRALPURCHASE("OnReferralPurchase"),
    
    ONPURCHASECANCEL("OnPurchaseCancel"),
    
    ONREMOVESOCIALACTIVITY("OnRemoveSocialActivity"),
    
    ONPURCHASEDISCOUNT("OnPurchaseDiscount"),
    
    ONSENDPASSWORDTOCHEQUE("OnSendPasswordToCheque"),
    
    ONGOODSSETPROCESS("OnGoodsSetProcess"),
    
    ONATTACHEMAIL("OnAttachEmail"),
    
    ONBONUSLIFETIMEACTIVATION("OnBonusLifetimeActivation"),
    
    ONPURCHASEPAYMENTCALCULATE("OnPurchasePaymentCalculate"),
    
    ONPURCHASEPAYMENTCANCEL("OnPurchasePaymentCancel"),
    
    ONCOUPONPURCHASED("OnCouponPurchased"),
    
    ONCOUPONREFUNDED("OnCouponRefunded"),
    
    ONPURCHASEDEPOSIT("OnPurchaseDeposit"),
    
    ONCARDATTACH("OnCardAttach"),
    
    ONCARDREPLACE("OnCardReplace"),
    
    ONEXTERNALCARDREPLACE("OnExternalCardReplace"),
    
    ONPURCHASEREFUNDCALCULATE("OnPurchaseRefundCalculate"),
    
    ONMANUALCHARGE("OnManualCharge"),
    
    ONMANUALWITHDRAW("OnManualWithdraw");

    private String value;

    OfferEventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OfferEventTypeEnum fromValue(String text) {
      for (OfferEventTypeEnum b : OfferEventTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("offerEventType")
  private OfferEventTypeEnum offerEventType = null;

  @JsonProperty("offers")
  private List<CalculationOfferModel> offers = null;

  @JsonProperty("positionsModel")
  private List<ChequePositionViewModel> positionsModel = null;

  @JsonProperty("relatedEventCalculations")
  private List<EventCalculationModel> relatedEventCalculations = null;

  @JsonProperty("businessEvent")
  private BusinessActivityViewModel businessEvent = null;

  public EventCalculationModel id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public EventCalculationModel calculationType(CalculationTypeEnum calculationType) {
    this.calculationType = calculationType;
    return this;
  }

   /**
   * Тип расчёта.
   * @return calculationType
  **/
  @ApiModelProperty(value = "Тип расчёта.")
  public CalculationTypeEnum getCalculationType() {
    return calculationType;
  }

  public void setCalculationType(CalculationTypeEnum calculationType) {
    this.calculationType = calculationType;
  }

  public EventCalculationModel offerEventType(OfferEventTypeEnum offerEventType) {
    this.offerEventType = offerEventType;
    return this;
  }

   /**
   * Тип события.
   * @return offerEventType
  **/
  @ApiModelProperty(value = "Тип события.")
  public OfferEventTypeEnum getOfferEventType() {
    return offerEventType;
  }

  public void setOfferEventType(OfferEventTypeEnum offerEventType) {
    this.offerEventType = offerEventType;
  }

  public EventCalculationModel offers(List<CalculationOfferModel> offers) {
    this.offers = offers;
    return this;
  }

  public EventCalculationModel addOffersItem(CalculationOfferModel offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

   /**
   * Акции на расчёт.
   * @return offers
  **/
  @ApiModelProperty(value = "Акции на расчёт.")
  public List<CalculationOfferModel> getOffers() {
    return offers;
  }

  public void setOffers(List<CalculationOfferModel> offers) {
    this.offers = offers;
  }

  public EventCalculationModel positionsModel(List<ChequePositionViewModel> positionsModel) {
    this.positionsModel = positionsModel;
    return this;
  }

  public EventCalculationModel addPositionsModelItem(ChequePositionViewModel positionsModelItem) {
    if (this.positionsModel == null) {
      this.positionsModel = new ArrayList<>();
    }
    this.positionsModel.add(positionsModelItem);
    return this;
  }

   /**
   * Позиции чека.
   * @return positionsModel
  **/
  @ApiModelProperty(value = "Позиции чека.")
  public List<ChequePositionViewModel> getPositionsModel() {
    return positionsModel;
  }

  public void setPositionsModel(List<ChequePositionViewModel> positionsModel) {
    this.positionsModel = positionsModel;
  }

  public EventCalculationModel relatedEventCalculations(List<EventCalculationModel> relatedEventCalculations) {
    this.relatedEventCalculations = relatedEventCalculations;
    return this;
  }

  public EventCalculationModel addRelatedEventCalculationsItem(EventCalculationModel relatedEventCalculationsItem) {
    if (this.relatedEventCalculations == null) {
      this.relatedEventCalculations = new ArrayList<>();
    }
    this.relatedEventCalculations.add(relatedEventCalculationsItem);
    return this;
  }

   /**
   * Расчёты событий в рамках одной активности.
   * @return relatedEventCalculations
  **/
  @ApiModelProperty(value = "Расчёты событий в рамках одной активности.")
  public List<EventCalculationModel> getRelatedEventCalculations() {
    return relatedEventCalculations;
  }

  public void setRelatedEventCalculations(List<EventCalculationModel> relatedEventCalculations) {
    this.relatedEventCalculations = relatedEventCalculations;
  }

  public EventCalculationModel businessEvent(BusinessActivityViewModel businessEvent) {
    this.businessEvent = businessEvent;
    return this;
  }

   /**
   * Событие, с которым связан расчёт.
   * @return businessEvent
  **/
  @ApiModelProperty(value = "Событие, с которым связан расчёт.")
  public BusinessActivityViewModel getBusinessEvent() {
    return businessEvent;
  }

  public void setBusinessEvent(BusinessActivityViewModel businessEvent) {
    this.businessEvent = businessEvent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventCalculationModel eventCalculationModel = (EventCalculationModel) o;
    return Objects.equals(this.id, eventCalculationModel.id) &&
        Objects.equals(this.calculationType, eventCalculationModel.calculationType) &&
        Objects.equals(this.offerEventType, eventCalculationModel.offerEventType) &&
        Objects.equals(this.offers, eventCalculationModel.offers) &&
        Objects.equals(this.positionsModel, eventCalculationModel.positionsModel) &&
        Objects.equals(this.relatedEventCalculations, eventCalculationModel.relatedEventCalculations) &&
        Objects.equals(this.businessEvent, eventCalculationModel.businessEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, calculationType, offerEventType, offers, positionsModel, relatedEventCalculations, businessEvent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventCalculationModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    offerEventType: ").append(toIndentedString(offerEventType)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    positionsModel: ").append(toIndentedString(positionsModel)).append("\n");
    sb.append("    relatedEventCalculations: ").append(toIndentedString(relatedEventCalculations)).append("\n");
    sb.append("    businessEvent: ").append(toIndentedString(businessEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

