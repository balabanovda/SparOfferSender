/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Модель для получения дерева доступных фильтров.
 */
@ApiModel(description = "Модель для получения дерева доступных фильтров.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class GetFiltersTreeModel {
  @JsonProperty("offerId")
  private Integer offerId = null;

  @JsonProperty("chainId")
  private Integer chainId = null;

  /**
   * Для чего нужно получить дерево фильтров.
   */
  public enum FilterDestinationTypeEnum {
    TARGETGROUP("TargetGroup"),
    
    OFFER("Offer"),
    
    OFFERACTION("OfferAction"),
    
    FILTERPURCHASE("FilterPurchase"),
    
    FILTERPOSITION("FilterPosition");

    private String value;

    FilterDestinationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterDestinationTypeEnum fromValue(String text) {
      for (FilterDestinationTypeEnum b : FilterDestinationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("filterDestinationType")
  private FilterDestinationTypeEnum filterDestinationType = null;

  /**
   * Тип события.
   */
  public enum EventTypeEnum {
    ONPURCHASECALCULATE("OnPurchaseCalculate"),
    
    ONATTACHPHONE("OnAttachPhone"),
    
    ONPURCHASECONFIRM("OnPurchaseConfirm"),
    
    ONPURCHASEPAYMENT("OnPurchasePayment"),
    
    ONBALANCEREQUEST("OnBalanceRequest"),
    
    ONCARDISSUE("OnCardIssue"),
    
    ONCARDACTIVATION("OnCardActivation"),
    
    ONSOCIALACTIVITY("OnSocialActivity"),
    
    ONSOCIALGROUPJOIN("OnSocialGroupJoin"),
    
    ONFRIENDINVITE("OnFriendInvite"),
    
    ONSOCIALGROUPLEAVE("OnSocialGroupLeave"),
    
    ONQUESTIONNAIREUPDATE("OnQuestionnaireUpdate"),
    
    ONMOBILEAPPINSTALL("OnMobileAppInstall"),
    
    ONENDPERSONREGISTRATION("OnEndPersonRegistration"),
    
    ONSOCIALNETWORKLINK("OnSocialNetworkLink"),
    
    ONBONUSLIFETIMEEXPIRED("OnBonusLifetimeExpired"),
    
    ONBIRTHDAY("OnBirthday"),
    
    ONPURCHASEREFUND("OnPurchaseRefund"),
    
    ONREFERRALPURCHASE("OnReferralPurchase"),
    
    ONPURCHASECANCEL("OnPurchaseCancel"),
    
    ONREMOVESOCIALACTIVITY("OnRemoveSocialActivity"),
    
    ONPURCHASEDISCOUNT("OnPurchaseDiscount"),
    
    ONSENDPASSWORDTOCHEQUE("OnSendPasswordToCheque"),
    
    ONGOODSSETPROCESS("OnGoodsSetProcess"),
    
    ONATTACHEMAIL("OnAttachEmail"),
    
    ONBONUSLIFETIMEACTIVATION("OnBonusLifetimeActivation"),
    
    ONPURCHASEPAYMENTCALCULATE("OnPurchasePaymentCalculate"),
    
    ONPURCHASEPAYMENTCANCEL("OnPurchasePaymentCancel"),
    
    ONCOUPONPURCHASED("OnCouponPurchased"),
    
    ONCOUPONREFUNDED("OnCouponRefunded"),
    
    ONPURCHASEDEPOSIT("OnPurchaseDeposit"),
    
    ONCARDATTACH("OnCardAttach"),
    
    ONCARDREPLACE("OnCardReplace"),
    
    ONEXTERNALCARDREPLACE("OnExternalCardReplace"),
    
    ONPURCHASEREFUNDCALCULATE("OnPurchaseRefundCalculate"),
    
    ONMANUALCHARGE("OnManualCharge"),
    
    ONMANUALWITHDRAW("OnManualWithdraw");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String text) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("eventType")
  private EventTypeEnum eventType = null;

  /**
   * Тип события, исходя из которого нужно отфильтровать результат.
   */
  public enum ExclusionTypeEnum {
    ONPURCHASECALCULATE("OnPurchaseCalculate"),
    
    ONATTACHPHONE("OnAttachPhone"),
    
    ONPURCHASECONFIRM("OnPurchaseConfirm"),
    
    ONPURCHASEPAYMENT("OnPurchasePayment"),
    
    ONBALANCEREQUEST("OnBalanceRequest"),
    
    ONCARDISSUE("OnCardIssue"),
    
    ONCARDACTIVATION("OnCardActivation"),
    
    ONSOCIALACTIVITY("OnSocialActivity"),
    
    ONSOCIALGROUPJOIN("OnSocialGroupJoin"),
    
    ONFRIENDINVITE("OnFriendInvite"),
    
    ONSOCIALGROUPLEAVE("OnSocialGroupLeave"),
    
    ONQUESTIONNAIREUPDATE("OnQuestionnaireUpdate"),
    
    ONMOBILEAPPINSTALL("OnMobileAppInstall"),
    
    ONENDPERSONREGISTRATION("OnEndPersonRegistration"),
    
    ONSOCIALNETWORKLINK("OnSocialNetworkLink"),
    
    ONBONUSLIFETIMEEXPIRED("OnBonusLifetimeExpired"),
    
    ONBIRTHDAY("OnBirthday"),
    
    ONPURCHASEREFUND("OnPurchaseRefund"),
    
    ONREFERRALPURCHASE("OnReferralPurchase"),
    
    ONPURCHASECANCEL("OnPurchaseCancel"),
    
    ONREMOVESOCIALACTIVITY("OnRemoveSocialActivity"),
    
    ONPURCHASEDISCOUNT("OnPurchaseDiscount"),
    
    ONSENDPASSWORDTOCHEQUE("OnSendPasswordToCheque"),
    
    ONGOODSSETPROCESS("OnGoodsSetProcess"),
    
    ONATTACHEMAIL("OnAttachEmail"),
    
    ONBONUSLIFETIMEACTIVATION("OnBonusLifetimeActivation"),
    
    ONPURCHASEPAYMENTCALCULATE("OnPurchasePaymentCalculate"),
    
    ONPURCHASEPAYMENTCANCEL("OnPurchasePaymentCancel"),
    
    ONCOUPONPURCHASED("OnCouponPurchased"),
    
    ONCOUPONREFUNDED("OnCouponRefunded"),
    
    ONPURCHASEDEPOSIT("OnPurchaseDeposit"),
    
    ONCARDATTACH("OnCardAttach"),
    
    ONCARDREPLACE("OnCardReplace"),
    
    ONEXTERNALCARDREPLACE("OnExternalCardReplace"),
    
    ONPURCHASEREFUNDCALCULATE("OnPurchaseRefundCalculate"),
    
    ONMANUALCHARGE("OnManualCharge"),
    
    ONMANUALWITHDRAW("OnManualWithdraw");

    private String value;

    ExclusionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExclusionTypeEnum fromValue(String text) {
      for (ExclusionTypeEnum b : ExclusionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("exclusionType")
  private ExclusionTypeEnum exclusionType = null;

  public GetFiltersTreeModel offerId(Integer offerId) {
    this.offerId = offerId;
    return this;
  }

   /**
   * Id акции.
   * @return offerId
  **/
  @ApiModelProperty(value = "Id акции.")
  public Integer getOfferId() {
    return offerId;
  }

  public void setOfferId(Integer offerId) {
    this.offerId = offerId;
  }

  public GetFiltersTreeModel chainId(Integer chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * Id цепочки.
   * @return chainId
  **/
  @ApiModelProperty(value = "Id цепочки.")
  public Integer getChainId() {
    return chainId;
  }

  public void setChainId(Integer chainId) {
    this.chainId = chainId;
  }

  public GetFiltersTreeModel filterDestinationType(FilterDestinationTypeEnum filterDestinationType) {
    this.filterDestinationType = filterDestinationType;
    return this;
  }

   /**
   * Для чего нужно получить дерево фильтров.
   * @return filterDestinationType
  **/
  @ApiModelProperty(value = "Для чего нужно получить дерево фильтров.")
  public FilterDestinationTypeEnum getFilterDestinationType() {
    return filterDestinationType;
  }

  public void setFilterDestinationType(FilterDestinationTypeEnum filterDestinationType) {
    this.filterDestinationType = filterDestinationType;
  }

  public GetFiltersTreeModel eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Тип события.
   * @return eventType
  **/
  @ApiModelProperty(value = "Тип события.")
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }

  public GetFiltersTreeModel exclusionType(ExclusionTypeEnum exclusionType) {
    this.exclusionType = exclusionType;
    return this;
  }

   /**
   * Тип события, исходя из которого нужно отфильтровать результат.
   * @return exclusionType
  **/
  @ApiModelProperty(value = "Тип события, исходя из которого нужно отфильтровать результат.")
  public ExclusionTypeEnum getExclusionType() {
    return exclusionType;
  }

  public void setExclusionType(ExclusionTypeEnum exclusionType) {
    this.exclusionType = exclusionType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFiltersTreeModel getFiltersTreeModel = (GetFiltersTreeModel) o;
    return Objects.equals(this.offerId, getFiltersTreeModel.offerId) &&
        Objects.equals(this.chainId, getFiltersTreeModel.chainId) &&
        Objects.equals(this.filterDestinationType, getFiltersTreeModel.filterDestinationType) &&
        Objects.equals(this.eventType, getFiltersTreeModel.eventType) &&
        Objects.equals(this.exclusionType, getFiltersTreeModel.exclusionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offerId, chainId, filterDestinationType, eventType, exclusionType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFiltersTreeModel {\n");
    
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    filterDestinationType: ").append(toIndentedString(filterDestinationType)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    exclusionType: ").append(toIndentedString(exclusionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

