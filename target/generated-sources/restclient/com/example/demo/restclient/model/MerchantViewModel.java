/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.LocationDataModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;

/**
 * ViewModel с информацией о магазине.
 */
@ApiModel(description = "ViewModel с информацией о магазине.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class MerchantViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("internalName")
  private String internalName = null;

  @JsonProperty("guid")
  private UUID guid = null;

  @JsonProperty("brandId")
  private Integer brandId = null;

  @JsonProperty("brandName")
  private String brandName = null;

  @JsonProperty("partnerCatalogId")
  private Integer partnerCatalogId = null;

  @JsonProperty("location")
  private LocationDataModel location = null;

  @JsonProperty("isDeleted")
  private Boolean isDeleted = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("order")
  private Integer order = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("schedule")
  private String schedule = null;

  @JsonProperty("contacts")
  private String contacts = null;

  @JsonProperty("image")
  private String image = null;

  @JsonProperty("isConfirmCodeDeviceVerificationEnabled")
  private Boolean isConfirmCodeDeviceVerificationEnabled = null;

  @JsonProperty("confirmPaymentAmount")
  private Integer confirmPaymentAmount = null;

  /**
   * Возможность отрицательного баланса при проведении операции .
   */
  public enum RefundNegativeTypeEnum {
    SUPPRESSNEGATIVE("SuppressNegative"),
    
    ALLOWNEGATIVE("AllowNegative");

    private String value;

    RefundNegativeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RefundNegativeTypeEnum fromValue(String text) {
      for (RefundNegativeTypeEnum b : RefundNegativeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("refundNegativeType")
  private RefundNegativeTypeEnum refundNegativeType = null;

  public MerchantViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public MerchantViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Название.
   * @return name
  **/
  @ApiModelProperty(value = "Название.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MerchantViewModel internalName(String internalName) {
    this.internalName = internalName;
    return this;
  }

   /**
   * Внутреннее название.
   * @return internalName
  **/
  @ApiModelProperty(value = "Внутреннее название.")
  public String getInternalName() {
    return internalName;
  }

  public void setInternalName(String internalName) {
    this.internalName = internalName;
  }

  public MerchantViewModel guid(UUID guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Уникальный идентификатор.
   * @return guid
  **/
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "Уникальный идентификатор.")
  public UUID getGuid() {
    return guid;
  }

  public void setGuid(UUID guid) {
    this.guid = guid;
  }

  public MerchantViewModel brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Идентификатор бренда.
   * @return brandId
  **/
  @ApiModelProperty(value = "Идентификатор бренда.")
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }

  public MerchantViewModel brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

   /**
   * Название бренда.
   * @return brandName
  **/
  @ApiModelProperty(value = "Название бренда.")
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }

  public MerchantViewModel partnerCatalogId(Integer partnerCatalogId) {
    this.partnerCatalogId = partnerCatalogId;
    return this;
  }

   /**
   * Идентификатор каталога партнера.
   * @return partnerCatalogId
  **/
  @ApiModelProperty(value = "Идентификатор каталога партнера.")
  public Integer getPartnerCatalogId() {
    return partnerCatalogId;
  }

  public void setPartnerCatalogId(Integer partnerCatalogId) {
    this.partnerCatalogId = partnerCatalogId;
  }

  public MerchantViewModel location(LocationDataModel location) {
    this.location = location;
    return this;
  }

   /**
   * Местоположение магазина.
   * @return location
  **/
  @ApiModelProperty(value = "Местоположение магазина.")
  public LocationDataModel getLocation() {
    return location;
  }

  public void setLocation(LocationDataModel location) {
    this.location = location;
  }

  public MerchantViewModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Признак архивности.
   * @return isDeleted
  **/
  @ApiModelProperty(value = "Признак архивности.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public MerchantViewModel url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Url адрес.
   * @return url
  **/
  @ApiModelProperty(value = "Url адрес.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public MerchantViewModel order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Order.
   * @return order
  **/
  @ApiModelProperty(value = "Order.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public MerchantViewModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Описание.
   * @return description
  **/
  @ApiModelProperty(value = "Описание.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public MerchantViewModel schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Расписание.
   * @return schedule
  **/
  @ApiModelProperty(value = "Расписание.")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }

  public MerchantViewModel contacts(String contacts) {
    this.contacts = contacts;
    return this;
  }

   /**
   * Контакты.
   * @return contacts
  **/
  @ApiModelProperty(value = "Контакты.")
  public String getContacts() {
    return contacts;
  }

  public void setContacts(String contacts) {
    this.contacts = contacts;
  }

  public MerchantViewModel image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Изображение.
   * @return image
  **/
  @ApiModelProperty(value = "Изображение.")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public MerchantViewModel isConfirmCodeDeviceVerificationEnabled(Boolean isConfirmCodeDeviceVerificationEnabled) {
    this.isConfirmCodeDeviceVerificationEnabled = isConfirmCodeDeviceVerificationEnabled;
    return this;
  }

   /**
   * Подтверждение списания бонусов кодом включено.
   * @return isConfirmCodeDeviceVerificationEnabled
  **/
  @ApiModelProperty(value = "Подтверждение списания бонусов кодом включено.")
  public Boolean isIsConfirmCodeDeviceVerificationEnabled() {
    return isConfirmCodeDeviceVerificationEnabled;
  }

  public void setIsConfirmCodeDeviceVerificationEnabled(Boolean isConfirmCodeDeviceVerificationEnabled) {
    this.isConfirmCodeDeviceVerificationEnabled = isConfirmCodeDeviceVerificationEnabled;
  }

  public MerchantViewModel confirmPaymentAmount(Integer confirmPaymentAmount) {
    this.confirmPaymentAmount = confirmPaymentAmount;
    return this;
  }

   /**
   * Сумма для которой нужно отправлять подтверждение.
   * @return confirmPaymentAmount
  **/
  @ApiModelProperty(value = "Сумма для которой нужно отправлять подтверждение.")
  public Integer getConfirmPaymentAmount() {
    return confirmPaymentAmount;
  }

  public void setConfirmPaymentAmount(Integer confirmPaymentAmount) {
    this.confirmPaymentAmount = confirmPaymentAmount;
  }

  public MerchantViewModel refundNegativeType(RefundNegativeTypeEnum refundNegativeType) {
    this.refundNegativeType = refundNegativeType;
    return this;
  }

   /**
   * Возможность отрицательного баланса при проведении операции .
   * @return refundNegativeType
  **/
  @ApiModelProperty(value = "Возможность отрицательного баланса при проведении операции .")
  public RefundNegativeTypeEnum getRefundNegativeType() {
    return refundNegativeType;
  }

  public void setRefundNegativeType(RefundNegativeTypeEnum refundNegativeType) {
    this.refundNegativeType = refundNegativeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantViewModel merchantViewModel = (MerchantViewModel) o;
    return Objects.equals(this.id, merchantViewModel.id) &&
        Objects.equals(this.name, merchantViewModel.name) &&
        Objects.equals(this.internalName, merchantViewModel.internalName) &&
        Objects.equals(this.guid, merchantViewModel.guid) &&
        Objects.equals(this.brandId, merchantViewModel.brandId) &&
        Objects.equals(this.brandName, merchantViewModel.brandName) &&
        Objects.equals(this.partnerCatalogId, merchantViewModel.partnerCatalogId) &&
        Objects.equals(this.location, merchantViewModel.location) &&
        Objects.equals(this.isDeleted, merchantViewModel.isDeleted) &&
        Objects.equals(this.url, merchantViewModel.url) &&
        Objects.equals(this.order, merchantViewModel.order) &&
        Objects.equals(this.description, merchantViewModel.description) &&
        Objects.equals(this.schedule, merchantViewModel.schedule) &&
        Objects.equals(this.contacts, merchantViewModel.contacts) &&
        Objects.equals(this.image, merchantViewModel.image) &&
        Objects.equals(this.isConfirmCodeDeviceVerificationEnabled, merchantViewModel.isConfirmCodeDeviceVerificationEnabled) &&
        Objects.equals(this.confirmPaymentAmount, merchantViewModel.confirmPaymentAmount) &&
        Objects.equals(this.refundNegativeType, merchantViewModel.refundNegativeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, internalName, guid, brandId, brandName, partnerCatalogId, location, isDeleted, url, order, description, schedule, contacts, image, isConfirmCodeDeviceVerificationEnabled, confirmPaymentAmount, refundNegativeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    internalName: ").append(toIndentedString(internalName)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    partnerCatalogId: ").append(toIndentedString(partnerCatalogId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isConfirmCodeDeviceVerificationEnabled: ").append(toIndentedString(isConfirmCodeDeviceVerificationEnabled)).append("\n");
    sb.append("    confirmPaymentAmount: ").append(toIndentedString(confirmPaymentAmount)).append("\n");
    sb.append("    refundNegativeType: ").append(toIndentedString(refundNegativeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

