/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Модель данных запроса на получение списка шаблонов уведомлений.
 */
@ApiModel(description = "Модель данных запроса на получение списка шаблонов уведомлений.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class NotifyTemplatesQuery {
  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("count")
  private Integer count = null;

  /**
   * Тип шаблона уведомлений.
   */
  public enum TemplateTypeEnum {
    HEADERANDTEXT("HeaderAndText"),
    
    PUSH("Push"),
    
    SIMPLE("Simple"),
    
    MESSENGER("Messenger"),
    
    SOCIALNETWORKS("SocialNetworks"),
    
    CHATBOT("ChatBot");

    private String value;

    TemplateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TemplateTypeEnum fromValue(String text) {
      for (TemplateTypeEnum b : TemplateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("templateType")
  private TemplateTypeEnum templateType = null;

  @JsonProperty("logicalNameSubStr")
  private String logicalNameSubStr = null;

  @JsonProperty("textSubStr")
  private String textSubStr = null;

  /**
   * Тип подписки.
   */
  public enum SubscriptionTypeEnum {
    CASHBACK("Cashback"),
    
    PAYMENT("Payment"),
    
    REFILL("Refill"),
    
    OFFER("Offer"),
    
    SYSTEM("System"),
    
    MAILING("Mailing"),
    
    REFUND("Refund"),
    
    DEVICEEMULATION("DeviceEmulation");

    private String value;

    SubscriptionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubscriptionTypeEnum fromValue(String text) {
      for (SubscriptionTypeEnum b : SubscriptionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("subscriptionType")
  private SubscriptionTypeEnum subscriptionType = null;

  /**
   * Режим отображения архивных шаблонов.
   */
  public enum ShowModeEnum {
    ARCHIVED("Archived"),
    
    NONARCHIVED("NonArchived");

    private String value;

    ShowModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ShowModeEnum fromValue(String text) {
      for (ShowModeEnum b : ShowModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("showMode")
  private ShowModeEnum showMode = null;

  public NotifyTemplatesQuery from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * С какого.
   * @return from
  **/
  @ApiModelProperty(value = "С какого.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public NotifyTemplatesQuery count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Сколько.
   * @return count
  **/
  @ApiModelProperty(value = "Сколько.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public NotifyTemplatesQuery templateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
    return this;
  }

   /**
   * Тип шаблона уведомлений.
   * @return templateType
  **/
  @ApiModelProperty(value = "Тип шаблона уведомлений.")
  public TemplateTypeEnum getTemplateType() {
    return templateType;
  }

  public void setTemplateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
  }

  public NotifyTemplatesQuery logicalNameSubStr(String logicalNameSubStr) {
    this.logicalNameSubStr = logicalNameSubStr;
    return this;
  }

   /**
   * Подстрока логического имени шаблона.
   * @return logicalNameSubStr
  **/
  @ApiModelProperty(value = "Подстрока логического имени шаблона.")
  public String getLogicalNameSubStr() {
    return logicalNameSubStr;
  }

  public void setLogicalNameSubStr(String logicalNameSubStr) {
    this.logicalNameSubStr = logicalNameSubStr;
  }

  public NotifyTemplatesQuery textSubStr(String textSubStr) {
    this.textSubStr = textSubStr;
    return this;
  }

   /**
   * Подстрока текстового описания шаблона.
   * @return textSubStr
  **/
  @ApiModelProperty(value = "Подстрока текстового описания шаблона.")
  public String getTextSubStr() {
    return textSubStr;
  }

  public void setTextSubStr(String textSubStr) {
    this.textSubStr = textSubStr;
  }

  public NotifyTemplatesQuery subscriptionType(SubscriptionTypeEnum subscriptionType) {
    this.subscriptionType = subscriptionType;
    return this;
  }

   /**
   * Тип подписки.
   * @return subscriptionType
  **/
  @ApiModelProperty(value = "Тип подписки.")
  public SubscriptionTypeEnum getSubscriptionType() {
    return subscriptionType;
  }

  public void setSubscriptionType(SubscriptionTypeEnum subscriptionType) {
    this.subscriptionType = subscriptionType;
  }

  public NotifyTemplatesQuery showMode(ShowModeEnum showMode) {
    this.showMode = showMode;
    return this;
  }

   /**
   * Режим отображения архивных шаблонов.
   * @return showMode
  **/
  @ApiModelProperty(value = "Режим отображения архивных шаблонов.")
  public ShowModeEnum getShowMode() {
    return showMode;
  }

  public void setShowMode(ShowModeEnum showMode) {
    this.showMode = showMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotifyTemplatesQuery notifyTemplatesQuery = (NotifyTemplatesQuery) o;
    return Objects.equals(this.from, notifyTemplatesQuery.from) &&
        Objects.equals(this.count, notifyTemplatesQuery.count) &&
        Objects.equals(this.templateType, notifyTemplatesQuery.templateType) &&
        Objects.equals(this.logicalNameSubStr, notifyTemplatesQuery.logicalNameSubStr) &&
        Objects.equals(this.textSubStr, notifyTemplatesQuery.textSubStr) &&
        Objects.equals(this.subscriptionType, notifyTemplatesQuery.subscriptionType) &&
        Objects.equals(this.showMode, notifyTemplatesQuery.showMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, count, templateType, logicalNameSubStr, textSubStr, subscriptionType, showMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotifyTemplatesQuery {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    logicalNameSubStr: ").append(toIndentedString(logicalNameSubStr)).append("\n");
    sb.append("    textSubStr: ").append(toIndentedString(textSubStr)).append("\n");
    sb.append("    subscriptionType: ").append(toIndentedString(subscriptionType)).append("\n");
    sb.append("    showMode: ").append(toIndentedString(showMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

