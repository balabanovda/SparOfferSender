/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Фильтр акций.
 */
@ApiModel(description = "Фильтр акций.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class OfferFilter {
  @JsonProperty("merchantId")
  private Integer merchantId = null;

  /**
   * Статус акции.
   */
  public enum OfferStateEnum {
    ACTIVE("Active"),
    
    COMMINGSOON("CommingSoon");

    private String value;

    OfferStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OfferStateEnum fromValue(String text) {
      for (OfferStateEnum b : OfferStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("offerState")
  private OfferStateEnum offerState = null;

  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("count")
  private Integer count = null;

  /**
   * Тип акции.
   */
  public enum TypeEnum {
    ORIGINAL("Original"),
    
    PERSONALGOODS("PersonalGoods"),
    
    PERSONALOFFER("PersonalOffer"),
    
    ALL("All");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * Фильтр по категории.
   */
  public enum CategoryFilterTypeEnum {
    SELECTBYLOGICALNAME("SelectByLogicalName"),
    
    IGNOREBYLOGICALNAME("IgnoreByLogicalName"),
    
    SELECTUNCATEGORIZED("SelectUncategorized");

    private String value;

    CategoryFilterTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryFilterTypeEnum fromValue(String text) {
      for (CategoryFilterTypeEnum b : CategoryFilterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("categoryFilterType")
  private CategoryFilterTypeEnum categoryFilterType = null;

  @JsonProperty("categoryLogicalNames")
  private List<String> categoryLogicalNames = null;

  public OfferFilter merchantId(Integer merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Id магазина.
   * @return merchantId
  **/
  @ApiModelProperty(value = "Id магазина.")
  public Integer getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(Integer merchantId) {
    this.merchantId = merchantId;
  }

  public OfferFilter offerState(OfferStateEnum offerState) {
    this.offerState = offerState;
    return this;
  }

   /**
   * Статус акции.
   * @return offerState
  **/
  @ApiModelProperty(value = "Статус акции.")
  public OfferStateEnum getOfferState() {
    return offerState;
  }

  public void setOfferState(OfferStateEnum offerState) {
    this.offerState = offerState;
  }

  public OfferFilter from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * Со скольки.
   * @return from
  **/
  @ApiModelProperty(value = "Со скольки.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public OfferFilter count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Сколько.
   * @return count
  **/
  @ApiModelProperty(value = "Сколько.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public OfferFilter type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Тип акции.
   * @return type
  **/
  @ApiModelProperty(value = "Тип акции.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public OfferFilter categoryFilterType(CategoryFilterTypeEnum categoryFilterType) {
    this.categoryFilterType = categoryFilterType;
    return this;
  }

   /**
   * Фильтр по категории.
   * @return categoryFilterType
  **/
  @ApiModelProperty(value = "Фильтр по категории.")
  public CategoryFilterTypeEnum getCategoryFilterType() {
    return categoryFilterType;
  }

  public void setCategoryFilterType(CategoryFilterTypeEnum categoryFilterType) {
    this.categoryFilterType = categoryFilterType;
  }

  public OfferFilter categoryLogicalNames(List<String> categoryLogicalNames) {
    this.categoryLogicalNames = categoryLogicalNames;
    return this;
  }

  public OfferFilter addCategoryLogicalNamesItem(String categoryLogicalNamesItem) {
    if (this.categoryLogicalNames == null) {
      this.categoryLogicalNames = new ArrayList<>();
    }
    this.categoryLogicalNames.add(categoryLogicalNamesItem);
    return this;
  }

   /**
   * Логические имена категорий.
   * @return categoryLogicalNames
  **/
  @ApiModelProperty(value = "Логические имена категорий.")
  public List<String> getCategoryLogicalNames() {
    return categoryLogicalNames;
  }

  public void setCategoryLogicalNames(List<String> categoryLogicalNames) {
    this.categoryLogicalNames = categoryLogicalNames;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferFilter offerFilter = (OfferFilter) o;
    return Objects.equals(this.merchantId, offerFilter.merchantId) &&
        Objects.equals(this.offerState, offerFilter.offerState) &&
        Objects.equals(this.from, offerFilter.from) &&
        Objects.equals(this.count, offerFilter.count) &&
        Objects.equals(this.type, offerFilter.type) &&
        Objects.equals(this.categoryFilterType, offerFilter.categoryFilterType) &&
        Objects.equals(this.categoryLogicalNames, offerFilter.categoryLogicalNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, offerState, from, count, type, categoryFilterType, categoryLogicalNames);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferFilter {\n");
    
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    offerState: ").append(toIndentedString(offerState)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    categoryFilterType: ").append(toIndentedString(categoryFilterType)).append("\n");
    sb.append("    categoryLogicalNames: ").append(toIndentedString(categoryLogicalNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

