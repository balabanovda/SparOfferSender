/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.QuestionAnswerModel;
import com.example.demo.restclient.model.QuestionFixedAnswerModel;
import com.example.demo.restclient.model.QuestionnaireItemModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Модель вопроса.
 */
@ApiModel(description = "Модель вопроса.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class QuestionModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("order")
  private Integer order = null;

  /**
   * Тип.
   */
  public enum TypeEnum {
    QUESTION("Question"),
    
    QUESTIONGROUP("QuestionGroup"),
    
    QUESTIONFIXEDANSWER("QuestionFixedAnswer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * Тип вопроса.
   */
  public enum QuestionTypeEnum {
    INT("Int"),
    
    DOUBLE("Double"),
    
    BOOLEAN("Boolean"),
    
    STRING("String"),
    
    DATE("Date"),
    
    SELECT("Select");

    private String value;

    QuestionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuestionTypeEnum fromValue(String text) {
      for (QuestionTypeEnum b : QuestionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("questionType")
  private QuestionTypeEnum questionType = null;

  @JsonProperty("logicalName")
  private String logicalName = null;

  @JsonProperty("regexp")
  private String regexp = null;

  @JsonProperty("regexpErrorMessage")
  private String regexpErrorMessage = null;

  @JsonProperty("isRequired")
  private Boolean isRequired = null;

  @JsonProperty("isReadOnly")
  private Boolean isReadOnly = null;

  @JsonProperty("isMultiSelect")
  private Boolean isMultiSelect = null;

  @JsonProperty("fixedAnswers")
  private List<QuestionFixedAnswerModel> fixedAnswers = null;

  @JsonProperty("answer")
  private QuestionAnswerModel answer = null;

  @JsonProperty("isVisibleInRegistration")
  private Boolean isVisibleInRegistration = null;

  public QuestionModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public QuestionModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Название.
   * @return name
  **/
  @ApiModelProperty(value = "Название.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public QuestionModel order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Порядок.
   * @return order
  **/
  @ApiModelProperty(value = "Порядок.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

   /**
   * Тип.
   * @return type
  **/
  @ApiModelProperty(value = "Тип.")
  public TypeEnum getType() {
    return type;
  }

  public QuestionModel questionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
    return this;
  }

   /**
   * Тип вопроса.
   * @return questionType
  **/
  @ApiModelProperty(value = "Тип вопроса.")
  public QuestionTypeEnum getQuestionType() {
    return questionType;
  }

  public void setQuestionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
  }

  public QuestionModel logicalName(String logicalName) {
    this.logicalName = logicalName;
    return this;
  }

   /**
   * Логическое имя.
   * @return logicalName
  **/
  @ApiModelProperty(value = "Логическое имя.")
  public String getLogicalName() {
    return logicalName;
  }

  public void setLogicalName(String logicalName) {
    this.logicalName = logicalName;
  }

  public QuestionModel regexp(String regexp) {
    this.regexp = regexp;
    return this;
  }

   /**
   * Регулярное выражение для дополнительной валидации.
   * @return regexp
  **/
  @ApiModelProperty(value = "Регулярное выражение для дополнительной валидации.")
  public String getRegexp() {
    return regexp;
  }

  public void setRegexp(String regexp) {
    this.regexp = regexp;
  }

  public QuestionModel regexpErrorMessage(String regexpErrorMessage) {
    this.regexpErrorMessage = regexpErrorMessage;
    return this;
  }

   /**
   * Сообщение в случае не удачной валидации через регулярное выражение.
   * @return regexpErrorMessage
  **/
  @ApiModelProperty(value = "Сообщение в случае не удачной валидации через регулярное выражение.")
  public String getRegexpErrorMessage() {
    return regexpErrorMessage;
  }

  public void setRegexpErrorMessage(String regexpErrorMessage) {
    this.regexpErrorMessage = regexpErrorMessage;
  }

  public QuestionModel isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

   /**
   * Обязательный.
   * @return isRequired
  **/
  @ApiModelProperty(value = "Обязательный.")
  public Boolean isIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }

  public QuestionModel isReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
    return this;
  }

   /**
   * Только для чтения.
   * @return isReadOnly
  **/
  @ApiModelProperty(value = "Только для чтения.")
  public Boolean isIsReadOnly() {
    return isReadOnly;
  }

  public void setIsReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
  }

  public QuestionModel isMultiSelect(Boolean isMultiSelect) {
    this.isMultiSelect = isMultiSelect;
    return this;
  }

   /**
   * Множественный выбор.
   * @return isMultiSelect
  **/
  @ApiModelProperty(value = "Множественный выбор.")
  public Boolean isIsMultiSelect() {
    return isMultiSelect;
  }

  public void setIsMultiSelect(Boolean isMultiSelect) {
    this.isMultiSelect = isMultiSelect;
  }

  public QuestionModel fixedAnswers(List<QuestionFixedAnswerModel> fixedAnswers) {
    this.fixedAnswers = fixedAnswers;
    return this;
  }

  public QuestionModel addFixedAnswersItem(QuestionFixedAnswerModel fixedAnswersItem) {
    if (this.fixedAnswers == null) {
      this.fixedAnswers = new ArrayList<>();
    }
    this.fixedAnswers.add(fixedAnswersItem);
    return this;
  }

   /**
   * Фиксированные ответы.
   * @return fixedAnswers
  **/
  @ApiModelProperty(value = "Фиксированные ответы.")
  public List<QuestionFixedAnswerModel> getFixedAnswers() {
    return fixedAnswers;
  }

  public void setFixedAnswers(List<QuestionFixedAnswerModel> fixedAnswers) {
    this.fixedAnswers = fixedAnswers;
  }

  public QuestionModel answer(QuestionAnswerModel answer) {
    this.answer = answer;
    return this;
  }

   /**
   * Ответ на вопрос анкеты.
   * @return answer
  **/
  @ApiModelProperty(value = "Ответ на вопрос анкеты.")
  public QuestionAnswerModel getAnswer() {
    return answer;
  }

  public void setAnswer(QuestionAnswerModel answer) {
    this.answer = answer;
  }

  public QuestionModel isVisibleInRegistration(Boolean isVisibleInRegistration) {
    this.isVisibleInRegistration = isVisibleInRegistration;
    return this;
  }

   /**
   * Видимый при регистрации.
   * @return isVisibleInRegistration
  **/
  @ApiModelProperty(value = "Видимый при регистрации.")
  public Boolean isIsVisibleInRegistration() {
    return isVisibleInRegistration;
  }

  public void setIsVisibleInRegistration(Boolean isVisibleInRegistration) {
    this.isVisibleInRegistration = isVisibleInRegistration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionModel questionModel = (QuestionModel) o;
    return Objects.equals(this.id, questionModel.id) &&
        Objects.equals(this.name, questionModel.name) &&
        Objects.equals(this.order, questionModel.order) &&
        Objects.equals(this.type, questionModel.type) &&
        Objects.equals(this.questionType, questionModel.questionType) &&
        Objects.equals(this.logicalName, questionModel.logicalName) &&
        Objects.equals(this.regexp, questionModel.regexp) &&
        Objects.equals(this.regexpErrorMessage, questionModel.regexpErrorMessage) &&
        Objects.equals(this.isRequired, questionModel.isRequired) &&
        Objects.equals(this.isReadOnly, questionModel.isReadOnly) &&
        Objects.equals(this.isMultiSelect, questionModel.isMultiSelect) &&
        Objects.equals(this.fixedAnswers, questionModel.fixedAnswers) &&
        Objects.equals(this.answer, questionModel.answer) &&
        Objects.equals(this.isVisibleInRegistration, questionModel.isVisibleInRegistration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, order, type, questionType, logicalName, regexp, regexpErrorMessage, isRequired, isReadOnly, isMultiSelect, fixedAnswers, answer, isVisibleInRegistration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    questionType: ").append(toIndentedString(questionType)).append("\n");
    sb.append("    logicalName: ").append(toIndentedString(logicalName)).append("\n");
    sb.append("    regexp: ").append(toIndentedString(regexp)).append("\n");
    sb.append("    regexpErrorMessage: ").append(toIndentedString(regexpErrorMessage)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
    sb.append("    isMultiSelect: ").append(toIndentedString(isMultiSelect)).append("\n");
    sb.append("    fixedAnswers: ").append(toIndentedString(fixedAnswers)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    isVisibleInRegistration: ").append(toIndentedString(isVisibleInRegistration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

