/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.AnswerHandlerViewModel;
import com.example.demo.restclient.model.QuestionnaireItemViewModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Вопрос анкеты.
 */
@ApiModel(description = "Вопрос анкеты.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class QuestionViewModel {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("collectionId")
  private Integer collectionId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("order")
  private Integer order = null;

  @JsonProperty("isDeleted")
  private Boolean isDeleted = null;

  @JsonProperty("isQuestion")
  private Boolean isQuestion = null;

  @JsonProperty("logicalName")
  private String logicalName = null;

  @JsonProperty("questionGroupId")
  private Integer questionGroupId = null;

  /**
   * Тип вопроса.
   */
  public enum QuestionTypeEnum {
    STRING("String"),
    
    SELECT("Select"),
    
    DATE("Date"),
    
    CHECK("Check"),
    
    INT("Int"),
    
    DOUBLE("Double");

    private String value;

    QuestionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuestionTypeEnum fromValue(String text) {
      for (QuestionTypeEnum b : QuestionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("questionType")
  private QuestionTypeEnum questionType = null;

  @JsonProperty("regexp")
  private String regexp = null;

  @JsonProperty("regexpErrorMessage")
  private String regexpErrorMessage = null;

  @JsonProperty("changePeriod")
  private Integer changePeriod = null;

  @JsonProperty("isRequired")
  private Boolean isRequired = null;

  @JsonProperty("isVisible")
  private Boolean isVisible = null;

  @JsonProperty("isMultiSelect")
  private Boolean isMultiSelect = null;

  @JsonProperty("answerHandlers")
  private List<AnswerHandlerViewModel> answerHandlers = null;

  @JsonProperty("isVisibleInRegistration")
  private Boolean isVisibleInRegistration = null;

  public QuestionViewModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор.
   * @return id
  **/
  @ApiModelProperty(value = "Идентификатор.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public QuestionViewModel collectionId(Integer collectionId) {
    this.collectionId = collectionId;
    return this;
  }

   /**
   * Уникальный Id в рамках коллекции.
   * @return collectionId
  **/
  @ApiModelProperty(value = "Уникальный Id в рамках коллекции.")
  public Integer getCollectionId() {
    return collectionId;
  }

  public void setCollectionId(Integer collectionId) {
    this.collectionId = collectionId;
  }

  public QuestionViewModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Наименование.
   * @return name
  **/
  @ApiModelProperty(value = "Наименование.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public QuestionViewModel order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Порядок.
   * @return order
  **/
  @ApiModelProperty(value = "Порядок.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public QuestionViewModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Удален.
   * @return isDeleted
  **/
  @ApiModelProperty(value = "Удален.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

   /**
   * Это вопрос.
   * @return isQuestion
  **/
  @ApiModelProperty(value = "Это вопрос.")
  public Boolean isIsQuestion() {
    return isQuestion;
  }

  public QuestionViewModel logicalName(String logicalName) {
    this.logicalName = logicalName;
    return this;
  }

   /**
   * Логическое наименование.
   * @return logicalName
  **/
  @ApiModelProperty(value = "Логическое наименование.")
  public String getLogicalName() {
    return logicalName;
  }

  public void setLogicalName(String logicalName) {
    this.logicalName = logicalName;
  }

  public QuestionViewModel questionGroupId(Integer questionGroupId) {
    this.questionGroupId = questionGroupId;
    return this;
  }

   /**
   * Идентификатор группы вопросов.
   * @return questionGroupId
  **/
  @ApiModelProperty(value = "Идентификатор группы вопросов.")
  public Integer getQuestionGroupId() {
    return questionGroupId;
  }

  public void setQuestionGroupId(Integer questionGroupId) {
    this.questionGroupId = questionGroupId;
  }

  public QuestionViewModel questionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
    return this;
  }

   /**
   * Тип вопроса.
   * @return questionType
  **/
  @ApiModelProperty(value = "Тип вопроса.")
  public QuestionTypeEnum getQuestionType() {
    return questionType;
  }

  public void setQuestionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
  }

  public QuestionViewModel regexp(String regexp) {
    this.regexp = regexp;
    return this;
  }

   /**
   * Регулярное выражение.
   * @return regexp
  **/
  @ApiModelProperty(value = "Регулярное выражение.")
  public String getRegexp() {
    return regexp;
  }

  public void setRegexp(String regexp) {
    this.regexp = regexp;
  }

  public QuestionViewModel regexpErrorMessage(String regexpErrorMessage) {
    this.regexpErrorMessage = regexpErrorMessage;
    return this;
  }

   /**
   * Сообщение при не удачной валидации через регулярное выражение.
   * @return regexpErrorMessage
  **/
  @ApiModelProperty(value = "Сообщение при не удачной валидации через регулярное выражение.")
  public String getRegexpErrorMessage() {
    return regexpErrorMessage;
  }

  public void setRegexpErrorMessage(String regexpErrorMessage) {
    this.regexpErrorMessage = regexpErrorMessage;
  }

  public QuestionViewModel changePeriod(Integer changePeriod) {
    this.changePeriod = changePeriod;
    return this;
  }

   /**
   * В течении скольких дней можно изменять ответ.
   * @return changePeriod
  **/
  @ApiModelProperty(value = "В течении скольких дней можно изменять ответ.")
  public Integer getChangePeriod() {
    return changePeriod;
  }

  public void setChangePeriod(Integer changePeriod) {
    this.changePeriod = changePeriod;
  }

  public QuestionViewModel isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

   /**
   * Обязательный.
   * @return isRequired
  **/
  @ApiModelProperty(value = "Обязательный.")
  public Boolean isIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }

  public QuestionViewModel isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Виден.
   * @return isVisible
  **/
  @ApiModelProperty(value = "Виден.")
  public Boolean isIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }

  public QuestionViewModel isMultiSelect(Boolean isMultiSelect) {
    this.isMultiSelect = isMultiSelect;
    return this;
  }

   /**
   * Множественный выбор.
   * @return isMultiSelect
  **/
  @ApiModelProperty(value = "Множественный выбор.")
  public Boolean isIsMultiSelect() {
    return isMultiSelect;
  }

  public void setIsMultiSelect(Boolean isMultiSelect) {
    this.isMultiSelect = isMultiSelect;
  }

  public QuestionViewModel answerHandlers(List<AnswerHandlerViewModel> answerHandlers) {
    this.answerHandlers = answerHandlers;
    return this;
  }

  public QuestionViewModel addAnswerHandlersItem(AnswerHandlerViewModel answerHandlersItem) {
    if (this.answerHandlers == null) {
      this.answerHandlers = new ArrayList<>();
    }
    this.answerHandlers.add(answerHandlersItem);
    return this;
  }

   /**
   * Обработчики ответа.
   * @return answerHandlers
  **/
  @ApiModelProperty(value = "Обработчики ответа.")
  public List<AnswerHandlerViewModel> getAnswerHandlers() {
    return answerHandlers;
  }

  public void setAnswerHandlers(List<AnswerHandlerViewModel> answerHandlers) {
    this.answerHandlers = answerHandlers;
  }

  public QuestionViewModel isVisibleInRegistration(Boolean isVisibleInRegistration) {
    this.isVisibleInRegistration = isVisibleInRegistration;
    return this;
  }

   /**
   * Видимый при регистрации.
   * @return isVisibleInRegistration
  **/
  @ApiModelProperty(value = "Видимый при регистрации.")
  public Boolean isIsVisibleInRegistration() {
    return isVisibleInRegistration;
  }

  public void setIsVisibleInRegistration(Boolean isVisibleInRegistration) {
    this.isVisibleInRegistration = isVisibleInRegistration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionViewModel questionViewModel = (QuestionViewModel) o;
    return Objects.equals(this.id, questionViewModel.id) &&
        Objects.equals(this.collectionId, questionViewModel.collectionId) &&
        Objects.equals(this.name, questionViewModel.name) &&
        Objects.equals(this.order, questionViewModel.order) &&
        Objects.equals(this.isDeleted, questionViewModel.isDeleted) &&
        Objects.equals(this.isQuestion, questionViewModel.isQuestion) &&
        Objects.equals(this.logicalName, questionViewModel.logicalName) &&
        Objects.equals(this.questionGroupId, questionViewModel.questionGroupId) &&
        Objects.equals(this.questionType, questionViewModel.questionType) &&
        Objects.equals(this.regexp, questionViewModel.regexp) &&
        Objects.equals(this.regexpErrorMessage, questionViewModel.regexpErrorMessage) &&
        Objects.equals(this.changePeriod, questionViewModel.changePeriod) &&
        Objects.equals(this.isRequired, questionViewModel.isRequired) &&
        Objects.equals(this.isVisible, questionViewModel.isVisible) &&
        Objects.equals(this.isMultiSelect, questionViewModel.isMultiSelect) &&
        Objects.equals(this.answerHandlers, questionViewModel.answerHandlers) &&
        Objects.equals(this.isVisibleInRegistration, questionViewModel.isVisibleInRegistration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, collectionId, name, order, isDeleted, isQuestion, logicalName, questionGroupId, questionType, regexp, regexpErrorMessage, changePeriod, isRequired, isVisible, isMultiSelect, answerHandlers, isVisibleInRegistration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionViewModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    isQuestion: ").append(toIndentedString(isQuestion)).append("\n");
    sb.append("    logicalName: ").append(toIndentedString(logicalName)).append("\n");
    sb.append("    questionGroupId: ").append(toIndentedString(questionGroupId)).append("\n");
    sb.append("    questionType: ").append(toIndentedString(questionType)).append("\n");
    sb.append("    regexp: ").append(toIndentedString(regexp)).append("\n");
    sb.append("    regexpErrorMessage: ").append(toIndentedString(regexpErrorMessage)).append("\n");
    sb.append("    changePeriod: ").append(toIndentedString(changePeriod)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    isMultiSelect: ").append(toIndentedString(isMultiSelect)).append("\n");
    sb.append("    answerHandlers: ").append(toIndentedString(answerHandlers)).append("\n");
    sb.append("    isVisibleInRegistration: ").append(toIndentedString(isVisibleInRegistration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

