/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.ActionDto;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;

/**
 * Действие акции \&quot;Отправка сообщения\&quot;.
 */
@ApiModel(description = "Действие акции \"Отправка сообщения\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class SendMessageActionDto {
  @JsonProperty("order")
  private Integer order = null;

  @JsonProperty("id")
  private String id = null;

  /**
   * Тип сообщения.
   */
  public enum MessageTypeEnum {
    SMS("Sms"),
    
    EMAIL("Email"),
    
    PUSH("Push"),
    
    VIBER("Viber"),
    
    SOCIALNETWORKS("SocialNetworks"),
    
    CHATBOT("ChatBot");

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MessageTypeEnum fromValue(String text) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("messageType")
  private MessageTypeEnum messageType = null;

  @JsonProperty("templateMessage")
  private String templateMessage = null;

  @JsonProperty("subject")
  private String subject = null;

  @JsonProperty("imageId")
  private UUID imageId = null;

  @JsonProperty("buttonText")
  private String buttonText = null;

  @JsonProperty("url")
  private String url = null;

  public SendMessageActionDto order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Порядковый номер действия в цепочке.
   * @return order
  **/
  @ApiModelProperty(value = "Порядковый номер действия в цепочке.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public SendMessageActionDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id действия в цепочке.
   * @return id
  **/
  @ApiModelProperty(value = "Id действия в цепочке.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SendMessageActionDto messageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
    return this;
  }

   /**
   * Тип сообщения.
   * @return messageType
  **/
  @ApiModelProperty(value = "Тип сообщения.")
  public MessageTypeEnum getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
  }

  public SendMessageActionDto templateMessage(String templateMessage) {
    this.templateMessage = templateMessage;
    return this;
  }

   /**
   * Шаблон сообщения.
   * @return templateMessage
  **/
  @ApiModelProperty(value = "Шаблон сообщения.")
  public String getTemplateMessage() {
    return templateMessage;
  }

  public void setTemplateMessage(String templateMessage) {
    this.templateMessage = templateMessage;
  }

  public SendMessageActionDto subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Заголовок.
   * @return subject
  **/
  @ApiModelProperty(value = "Заголовок.")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public SendMessageActionDto imageId(UUID imageId) {
    this.imageId = imageId;
    return this;
  }

   /**
   * Идентификатор изображения.
   * @return imageId
  **/
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "Идентификатор изображения.")
  public UUID getImageId() {
    return imageId;
  }

  public void setImageId(UUID imageId) {
    this.imageId = imageId;
  }

  public SendMessageActionDto buttonText(String buttonText) {
    this.buttonText = buttonText;
    return this;
  }

   /**
   * Текст кнопки.
   * @return buttonText
  **/
  @ApiModelProperty(value = "Текст кнопки.")
  public String getButtonText() {
    return buttonText;
  }

  public void setButtonText(String buttonText) {
    this.buttonText = buttonText;
  }

  public SendMessageActionDto url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL страницы, на которую будет отправлен пользователь при нажатии на кнопку.
   * @return url
  **/
  @ApiModelProperty(value = "URL страницы, на которую будет отправлен пользователь при нажатии на кнопку.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessageActionDto sendMessageActionDto = (SendMessageActionDto) o;
    return Objects.equals(this.order, sendMessageActionDto.order) &&
        Objects.equals(this.id, sendMessageActionDto.id) &&
        Objects.equals(this.messageType, sendMessageActionDto.messageType) &&
        Objects.equals(this.templateMessage, sendMessageActionDto.templateMessage) &&
        Objects.equals(this.subject, sendMessageActionDto.subject) &&
        Objects.equals(this.imageId, sendMessageActionDto.imageId) &&
        Objects.equals(this.buttonText, sendMessageActionDto.buttonText) &&
        Objects.equals(this.url, sendMessageActionDto.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, id, messageType, templateMessage, subject, imageId, buttonText, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessageActionDto {\n");
    
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    templateMessage: ").append(toIndentedString(templateMessage)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    buttonText: ").append(toIndentedString(buttonText)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

