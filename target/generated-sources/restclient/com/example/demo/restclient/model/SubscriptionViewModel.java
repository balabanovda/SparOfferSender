/*
 * Loymax.SystemApi
 * Loymax version: 2020.1.1.55071
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.demo.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.example.demo.restclient.model.SubscriptionNotificationStateModel;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Вью-модель подписки.
 */
@ApiModel(description = "Вью-модель подписки.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-25T13:30:11.810+03:00")
public class SubscriptionViewModel {
  @JsonProperty("typeId")
  private Integer typeId = null;

  @JsonProperty("typeName")
  private String typeName = null;

  @JsonProperty("externalId")
  private String externalId = null;

  @JsonProperty("smsNotification")
  private SubscriptionNotificationStateModel smsNotification = null;

  @JsonProperty("emailNotification")
  private SubscriptionNotificationStateModel emailNotification = null;

  @JsonProperty("pushNotification")
  private SubscriptionNotificationStateModel pushNotification = null;

  @JsonProperty("viberNotification")
  private SubscriptionNotificationStateModel viberNotification = null;

  @JsonProperty("socialNetworksNotification")
  private SubscriptionNotificationStateModel socialNetworksNotification = null;

  @JsonProperty("chatBotNotification")
  private SubscriptionNotificationStateModel chatBotNotification = null;

  public SubscriptionViewModel typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * Тип подписки.
   * @return typeId
  **/
  @ApiModelProperty(value = "Тип подписки.")
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }

  public SubscriptionViewModel typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Название типа подписки.
   * @return typeName
  **/
  @ApiModelProperty(value = "Название типа подписки.")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public SubscriptionViewModel externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Логическое имя типа подписки.
   * @return externalId
  **/
  @ApiModelProperty(value = "Логическое имя типа подписки.")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public SubscriptionViewModel smsNotification(SubscriptionNotificationStateModel smsNotification) {
    this.smsNotification = smsNotification;
    return this;
  }

   /**
   * Оповещение по Sms.
   * @return smsNotification
  **/
  @ApiModelProperty(value = "Оповещение по Sms.")
  public SubscriptionNotificationStateModel getSmsNotification() {
    return smsNotification;
  }

  public void setSmsNotification(SubscriptionNotificationStateModel smsNotification) {
    this.smsNotification = smsNotification;
  }

  public SubscriptionViewModel emailNotification(SubscriptionNotificationStateModel emailNotification) {
    this.emailNotification = emailNotification;
    return this;
  }

   /**
   * Оповещение по Email.
   * @return emailNotification
  **/
  @ApiModelProperty(value = "Оповещение по Email.")
  public SubscriptionNotificationStateModel getEmailNotification() {
    return emailNotification;
  }

  public void setEmailNotification(SubscriptionNotificationStateModel emailNotification) {
    this.emailNotification = emailNotification;
  }

  public SubscriptionViewModel pushNotification(SubscriptionNotificationStateModel pushNotification) {
    this.pushNotification = pushNotification;
    return this;
  }

   /**
   * Push оповещение.
   * @return pushNotification
  **/
  @ApiModelProperty(value = "Push оповещение.")
  public SubscriptionNotificationStateModel getPushNotification() {
    return pushNotification;
  }

  public void setPushNotification(SubscriptionNotificationStateModel pushNotification) {
    this.pushNotification = pushNotification;
  }

  public SubscriptionViewModel viberNotification(SubscriptionNotificationStateModel viberNotification) {
    this.viberNotification = viberNotification;
    return this;
  }

   /**
   * Viber оповещение.
   * @return viberNotification
  **/
  @ApiModelProperty(value = "Viber оповещение.")
  public SubscriptionNotificationStateModel getViberNotification() {
    return viberNotification;
  }

  public void setViberNotification(SubscriptionNotificationStateModel viberNotification) {
    this.viberNotification = viberNotification;
  }

  public SubscriptionViewModel socialNetworksNotification(SubscriptionNotificationStateModel socialNetworksNotification) {
    this.socialNetworksNotification = socialNetworksNotification;
    return this;
  }

   /**
   * SocialNetwork оповещение.
   * @return socialNetworksNotification
  **/
  @ApiModelProperty(value = "SocialNetwork оповещение.")
  public SubscriptionNotificationStateModel getSocialNetworksNotification() {
    return socialNetworksNotification;
  }

  public void setSocialNetworksNotification(SubscriptionNotificationStateModel socialNetworksNotification) {
    this.socialNetworksNotification = socialNetworksNotification;
  }

  public SubscriptionViewModel chatBotNotification(SubscriptionNotificationStateModel chatBotNotification) {
    this.chatBotNotification = chatBotNotification;
    return this;
  }

   /**
   * ChatBot оповещение.
   * @return chatBotNotification
  **/
  @ApiModelProperty(value = "ChatBot оповещение.")
  public SubscriptionNotificationStateModel getChatBotNotification() {
    return chatBotNotification;
  }

  public void setChatBotNotification(SubscriptionNotificationStateModel chatBotNotification) {
    this.chatBotNotification = chatBotNotification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionViewModel subscriptionViewModel = (SubscriptionViewModel) o;
    return Objects.equals(this.typeId, subscriptionViewModel.typeId) &&
        Objects.equals(this.typeName, subscriptionViewModel.typeName) &&
        Objects.equals(this.externalId, subscriptionViewModel.externalId) &&
        Objects.equals(this.smsNotification, subscriptionViewModel.smsNotification) &&
        Objects.equals(this.emailNotification, subscriptionViewModel.emailNotification) &&
        Objects.equals(this.pushNotification, subscriptionViewModel.pushNotification) &&
        Objects.equals(this.viberNotification, subscriptionViewModel.viberNotification) &&
        Objects.equals(this.socialNetworksNotification, subscriptionViewModel.socialNetworksNotification) &&
        Objects.equals(this.chatBotNotification, subscriptionViewModel.chatBotNotification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeId, typeName, externalId, smsNotification, emailNotification, pushNotification, viberNotification, socialNetworksNotification, chatBotNotification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionViewModel {\n");
    
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    smsNotification: ").append(toIndentedString(smsNotification)).append("\n");
    sb.append("    emailNotification: ").append(toIndentedString(emailNotification)).append("\n");
    sb.append("    pushNotification: ").append(toIndentedString(pushNotification)).append("\n");
    sb.append("    viberNotification: ").append(toIndentedString(viberNotification)).append("\n");
    sb.append("    socialNetworksNotification: ").append(toIndentedString(socialNetworksNotification)).append("\n");
    sb.append("    chatBotNotification: ").append(toIndentedString(chatBotNotification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

